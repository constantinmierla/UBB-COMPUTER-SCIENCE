        -:    0:Source:/mnt/d/FMI UBB CLUJ 2023-2026/UBB-COMPUTER-SCIENCE/SEMESTRUL 2/PROGRAMARE ORIENTATA OBIECT/LABORATOR/lab 5 refactorizare codul altuia/sort.c
        -:    0:Graph:/mnt/d/FMI UBB CLUJ 2023-2026/UBB-COMPUTER-SCIENCE/SEMESTRUL 2/PROGRAMARE ORIENTATA OBIECT/LABORATOR/lab 5 refactorizare codul altuia/cmake-build-debug-coverage/CMakeFiles/lab_2.dir/sort.c.gcno
        -:    0:Data:/mnt/d/FMI UBB CLUJ 2023-2026/UBB-COMPUTER-SCIENCE/SEMESTRUL 2/PROGRAMARE ORIENTATA OBIECT/LABORATOR/lab 5 refactorizare codul altuia/cmake-build-debug-coverage/CMakeFiles/lab_2.dir/sort.c.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by Costi on 20-Mar-24.
        -:    3://
        -:    4:#include <stdlib.h>
        -:    5:#include "sort.h"
        -:    6:#include "repository.h"
        -:    7:#include "service.h"
        -:    8:#include "string.h"
        -:    9:/**
        -:   10:* Sorteaza in place
        -:   11:* cmpf - relatia dupa care se sorteaza
        -:   12:*/
        -:   13:
function sort called 4 returned 100% blocks executed 100%
        4:   14:void sort(Offerte* l, CompareFct cmpF)
        -:   15:{
        -:   16:    int i, j;
       12:   17:    for (i = 0; i < l->dimensiune - 1; i++) {
        4:   17-block  0
        8:   17-block  1
       12:   17-block  2
branch  0 taken 8
branch  1 taken 4 (fallthrough)
       20:   18:        for (j = i + 1; j < l->dimensiune; j++) {
        8:   18-block  0
       12:   18-block  1
       20:   18-block  2
branch  0 taken 12
branch  1 taken 8 (fallthrough)
       12:   19:            if (cmpF(l->oferte[i], l->oferte[j]) > 0) {
       12:   19-block  0
call    0 returned 12
branch  1 taken 10 (fallthrough)
branch  2 taken 2
        -:   20:                // Swap elements l->lista[i] and l->lista[j]
       10:   21:                Entitate temp = l->oferte[i];
       10:   22:                l->oferte[i] = l->oferte[j];
       10:   23:                l->oferte[j] = temp;
       10:   23-block  0
        -:   24:            }
        -:   25:        }
        -:   26:    }
        4:   27:}
function sortbubble called 4 returned 100% blocks executed 100%
        4:   28:void sortbubble(Offerte* l, CompareFct cmpF)
        -:   29:{
        4:   30:    int ok = 1;
       11:   31:    while(ok == 1)
        4:   31-block  0
       11:   31-block  1
branch  0 taken 7
branch  1 taken 4 (fallthrough)
        -:   32:    {
        7:   33:        ok = 0;
       25:   34:        for (int i = 0; i < l->dimensiune-1; i++)
        7:   34-block  0
       18:   34-block  1
       25:   34-block  2
branch  0 taken 18
branch  1 taken 7 (fallthrough)
        -:   35:        {
       18:   36:            if(cmpF(l->oferte[i],l->oferte[i+1])>0)
       18:   36-block  0
call    0 returned 18
branch  1 taken 3 (fallthrough)
branch  2 taken 15
        -:   37:            {
        3:   38:                Entitate temp = l->oferte[i];
        3:   39:                l->oferte[i] = l->oferte[i+1];
        3:   40:                l->oferte[i+1] = temp;
        3:   41:                ok = 1;
        3:   41-block  0
        -:   42:            }
        -:   43:        }
        -:   44:    }
        4:   45:}
