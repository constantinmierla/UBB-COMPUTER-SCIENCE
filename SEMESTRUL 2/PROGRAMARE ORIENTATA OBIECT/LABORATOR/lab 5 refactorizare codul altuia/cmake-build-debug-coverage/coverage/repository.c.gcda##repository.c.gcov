        -:    0:Source:/mnt/d/FMI UBB CLUJ 2023-2026/UBB-COMPUTER-SCIENCE/SEMESTRUL 2/PROGRAMARE ORIENTATA OBIECT/LABORATOR/lab 5 refactorizare codul altuia/repository.c
        -:    0:Graph:/mnt/d/FMI UBB CLUJ 2023-2026/UBB-COMPUTER-SCIENCE/SEMESTRUL 2/PROGRAMARE ORIENTATA OBIECT/LABORATOR/lab 5 refactorizare codul altuia/cmake-build-debug-coverage/CMakeFiles/lab_2.dir/repository.c.gcno
        -:    0:Data:/mnt/d/FMI UBB CLUJ 2023-2026/UBB-COMPUTER-SCIENCE/SEMESTRUL 2/PROGRAMARE ORIENTATA OBIECT/LABORATOR/lab 5 refactorizare codul altuia/cmake-build-debug-coverage/CMakeFiles/lab_2.dir/repository.c.gcda
        -:    0:Runs:1
        -:    1:#include "repository.h"
        -:    2:#include <stdlib.h>
        -:    3:#include <stdio.h>
        -:    4:
        -:    5:/*Adauga o oferta noua.*/
function addEntitate called 0 returned 0% blocks executed 0%
    #####:    6:void addEntitate(Offerte* f, Entitate e)
        -:    7:{
    #####:    8:    if (f->dimensiune < f->capacitate)
    %%%%%:    8-block  0
branch  0 never executed
branch  1 never executed
        -:    9:    {
    #####:   10:        f->oferte[f->dimensiune] = e;
    #####:   11:        f->dimensiune += 1;
    %%%%%:   11-block  0
        -:   12:    }
        -:   13:    else
        -:   14:    {
    #####:   15:        asiguraCapacitate(f);
    %%%%%:   15-block  0
call    0 never executed
    #####:   16:        addEntitate(f, e);
call    0 never executed
        -:   17:    }
        -:   18:
    #####:   19:}
        -:   20:
        -:   21:/*Functie care mareste capacitatea.*/
function asiguraCapacitate called 0 returned 0% blocks executed 0%
    #####:   22:void asiguraCapacitate(Offerte* f)
        -:   23:{
        -:   24:
    #####:   25:    Entitate* capacitateNoua = malloc(sizeof(Entitate)*(f->capacitate * 2));
        -:   26:    //copiaza elementele
    #####:   27:    for (int i = 0; i < f->dimensiune; i++)
    %%%%%:   27-block  0
    %%%%%:   27-block  1
branch  0 never executed
branch  1 never executed
    #####:   28:        capacitateNoua[i] = f->oferte[i];
    %%%%%:   28-block  0
        -:   29:
        -:   30:    //dealoca memoria
    #####:   31:    free(f->oferte);
    #####:   32:    f->oferte = capacitateNoua;
    #####:   33:    f->capacitate *= 2;
        -:   34:
    #####:   35:}
        -:   36:
        -:   37:/*Sterge o oferta*/
function deleteEntitate called 0 returned 0% blocks executed 0%
    #####:   38:int deleteEntitate(Offerte* f, int id)
        -:   39:{
    #####:   40:    int i = 0;
    #####:   41:    int ok = 1;
    #####:   42:    while(i<f->dimensiune)
    %%%%%:   42-block  0
    %%%%%:   42-block  1
branch  0 never executed
branch  1 never executed
        -:   43:    {
    #####:   44:        Oferta* p = get(f, i);
    %%%%%:   44-block  0
call    0 never executed
    #####:   45:        if (p->id == id)
branch  0 never executed
branch  1 never executed
        -:   46:        {
    #####:   47:            destroyOferta(p);
    %%%%%:   47-block  0
call    0 never executed
    #####:   48:            for (int j = i; j < f->dimensiune - 1; j++)
    %%%%%:   48-block  0
branch  0 never executed
branch  1 never executed
    #####:   49:                f->oferte[j] = f->oferte[j + 1];
    %%%%%:   49-block  0
    #####:   50:            f->dimensiune -= 1;
    #####:   51:            ok = 0;
    %%%%%:   51-block  0
        -:   52:        }
        -:   53:
    #####:   54:        i++;
    %%%%%:   54-block  0
        -:   55:    }
        -:   56:
    #####:   57:    return ok;
    %%%%%:   57-block  0
        -:   58:}
        -:   59:
        -:   60:
        -:   61:/*Functie care creeaza o entitate noua si returneaza pointerul la entitatea respectiva.*/
function creeazaOfferte called 1 returned 100% blocks executed 100%
        1:   62:Offerte* creeazaOfferte()
        -:   63:{
        -:   64:
        1:   65:    Offerte* f = malloc(sizeof(Offerte));
        1:   66:    f->dimensiune = 0;
        1:   67:    f->capacitate = 2;
        1:   68:    f->oferte = malloc(sizeof(Entitate) * f->capacitate);
        -:   69:
        1:   70:    return f;
        1:   70-block  0
        -:   71:}
        -:   72:
        -:   73:/*Primeste un pointer la entitate si dealoca memoria ocupata de entitate.*/
function destroyOfferte called 1 returned 100% blocks executed 60%
        1:   74:void destroyOfferte(Offerte* f)
        -:   75:{
       1*:   76:    for (int i = 0; i < f->dimensiune; i++)
        1:   76-block  0
        1:   76-block  1
branch  0 taken 0
branch  1 taken 1 (fallthrough)
    #####:   77:        destroyOferta(f->oferte[i]);
    %%%%%:   77-block  0
call    0 never executed
        -:   78:
        1:   79:    free(f->oferte);
        1:   80:    free(f);
        -:   81:
        1:   82:}
        -:   83:/*Functie care face update
        -:   84: Primeste un pointer cu caracteristicile actualizate, distruge
        -:   85: vechi si il pune pe cel actualizat.
        -:   86:*/
function updateOferta called 0 returned 0% blocks executed 0%
    #####:   87:int updateOferta(Offerte* f, Oferta* m)
        -:   88:{
    #####:   89:    int ok = -1;
    #####:   90:    for (int i=0; i < f->dimensiune; i++)
    %%%%%:   90-block  0
    %%%%%:   90-block  1
    %%%%%:   90-block  2
branch  0 never executed
branch  1 never executed
        -:   91:    {
    #####:   92:        Oferta* p = get(f, i);
    %%%%%:   92-block  0
call    0 never executed
    #####:   93:        if (p->id == m->id)
branch  0 never executed
branch  1 never executed
        -:   94:        {
    #####:   95:            destroyOferta(set(f,i,m));
    %%%%%:   95-block  0
call    0 never executed
call    1 never executed
    #####:   96:            ok = 0;
        -:   97:        }
        -:   98:    }
    #####:   99:    return ok;
    %%%%%:   99-block  0
        -:  100:}
        -:  101:/*Functie care primeste un int -id- si returneaza pozitia pe care se afla elementul sau -1 in caz contrar*/
function cauta called 0 returned 0% blocks executed 0%
    #####:  102:int cauta(Offerte* f, int id)
        -:  103:{
        -:  104:
    #####:  105:    for (int i = 0; i < f->dimensiune; i++)
    %%%%%:  105-block  0
    %%%%%:  105-block  1
    %%%%%:  105-block  2
branch  0 never executed
branch  1 never executed
        -:  106:    {
    #####:  107:        Oferta* p = get(f, i);
    %%%%%:  107-block  0
call    0 never executed
    #####:  108:        if (p->id == id)
branch  0 never executed
branch  1 never executed
    #####:  109:            return i;
    %%%%%:  109-block  0
        -:  110:
        -:  111:    }
    #####:  112:    return -1;
    %%%%%:  112-block  0
        -:  113:}
        -:  114:
        -:  115:
        -:  116:/*Functie care returneaza elementul de pe o pozitie data*/
function get called 0 returned 0% blocks executed 0%
    #####:  117:Entitate get(Offerte* f, int i)
        -:  118:{
    #####:  119:    return f->oferte[i];
    %%%%%:  119-block  0
        -:  120:}
        -:  121:
        -:  122:/*Functie care pune pe o pozitie data o entitate data si returneaza fostul element de pe pozitia data.*/
function set called 0 returned 0% blocks executed 0%
    #####:  123:Entitate set(Offerte* f, int poz, Entitate e)
        -:  124:{
        -:  125:
    #####:  126:    Entitate rez = f->oferte[poz];
    #####:  127:    f->oferte[poz] = e;
    #####:  128:    return rez;
    %%%%%:  128-block  0
        -:  129:}
        -:  130:
        -:  131://Functie copy
function copy called 0 returned 0% blocks executed 0%
    #####:  132:Offerte* copy(Offerte* p)
        -:  133:{
    #####:  134:    Offerte* f = malloc(sizeof(Offerte));
    #####:  135:    f->dimensiune = p->dimensiune;
    #####:  136:    f->capacitate = p->capacitate;
    #####:  137:    f->oferte = malloc(sizeof (Oferta)*p->dimensiune);
    #####:  138:    for(int i=0; i< p->dimensiune;i++)
    %%%%%:  138-block  0
    %%%%%:  138-block  1
branch  0 never executed
branch  1 never executed
    #####:  139:        f->oferte[i] = copyOferta(p->oferte[i]);
    %%%%%:  139-block  0
call    0 never executed
        -:  140:
    #####:  141:    return f;
    %%%%%:  141-block  0
        -:  142:}
