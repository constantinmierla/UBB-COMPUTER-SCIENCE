        -:    0:Source:/mnt/d/FMI UBB CLUJ 2023-2026/UBB-COMPUTER-SCIENCE/SEMESTRUL 2/PROGRAMARE ORIENTATA OBIECT/LABORATOR/lab 5 refactorizare codul altuia/service.c
        -:    0:Graph:/mnt/d/FMI UBB CLUJ 2023-2026/UBB-COMPUTER-SCIENCE/SEMESTRUL 2/PROGRAMARE ORIENTATA OBIECT/LABORATOR/lab 5 refactorizare codul altuia/cmake-build-debug-coverage/CMakeFiles/lab_2.dir/service.c.gcno
        -:    0:Data:/mnt/d/FMI UBB CLUJ 2023-2026/UBB-COMPUTER-SCIENCE/SEMESTRUL 2/PROGRAMARE ORIENTATA OBIECT/LABORATOR/lab 5 refactorizare codul altuia/cmake-build-debug-coverage/CMakeFiles/lab_2.dir/service.c.gcda
        -:    0:Runs:1
        -:    1:#include<stdlib.h>
        -:    2:#include<string.h>
        -:    3:#include <stdio.h>
        -:    4:#include "service.h"
        -:    5:#include "domain.h"
        -:    6:#include "repository.h"
        -:    7:#include "sort.h"
function createBigList called 1 returned 100% blocks executed 100%
        1:    8:BigList createBigList()
        -:    9:{
        -:   10:    BigList listaMeds;
        1:   11:    listaMeds.lista = creeazaOfferte();
        1:   11-block  0
call    0 returned 1
        1:   12:    return listaMeds;
        -:   13:}
        -:   14:
function destroyBigList called 1 returned 100% blocks executed 100%
        1:   15:void destroyBigList(BigList* list)
        -:   16:{
        1:   17:    destroyOfferte(list->lista);
        1:   17-block  0
call    0 returned 1
        1:   18:}
        -:   19:
        -:   20:/*Adauga  o oferta in lista.
        -:   21: * Pre: list- de tip BigList*
        -:   22: * Post: 0 daca entitatea exista deja in lista, 1 altfel
        -:   23: */
function addEnt called 0 returned 0% blocks executed 0%
    #####:   24:int addEnt(BigList* list, char* tip, char* model, char* producer, int pret, int id)
        -:   25:{
    #####:   26:    Oferta* e = creeazaOferta(tip, model, producer, pret, id);
    %%%%%:   26-block  0
call    0 never executed
    #####:   27:    if(valideazaOferta(e) == 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   28:    {
    #####:   29:        addEntitate(list->lista,e);
    %%%%%:   29-block  0
call    0 never executed
    #####:   30:        return 1;
        -:   31:    }
        -:   32:    else
        -:   33:    {
    #####:   34:        destroyOferta(e);
    %%%%%:   34-block  0
call    0 never executed
    #####:   35:        return 0;
        -:   36:    }
        -:   37:}
        -:   38:/*Functie care sterge o entitate
        -:   39: *Pre:list de tip BigList*, id de tip int
        -:   40: * Post: 1 daca id-ul este in lista si a fost sters, 0 altfel
        -:   41: */
function deleteEnt called 0 returned 0% blocks executed 0%
    #####:   42:int deleteEnt(BigList* list,int id)
        -:   43:{
    #####:   44:    if(checkId(list,id))
    %%%%%:   44-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   45:    {
    #####:   46:        deleteEntitate(list->lista,id);
    %%%%%:   46-block  0
call    0 never executed
    #####:   47:        return 1;
        -:   48:    }
    #####:   49:    return 0;
    %%%%%:   49-block  0
        -:   50:}
        -:   51:
        -:   52:/*Face update .
        -:   53: * Pre: list- de tip BigList*
        -:   54: * Post: 0 daca entitatea exista deja in lista si s-a facut modificarea, 1 altfel
        -:   55: */
function updateEnt called 0 returned 0% blocks executed 0%
    #####:   56:int updateEnt(BigList* list, char* tip, char* model, char* producer, int pret, int id)
        -:   57:{
    #####:   58:    for(int i=0;i<list->lista->dimensiune;i++)
    %%%%%:   58-block  0
    %%%%%:   58-block  1
    %%%%%:   58-block  2
branch  0 never executed
branch  1 never executed
        -:   59:    {
    #####:   60:        if(getId(get(list->lista,i))==id)
    %%%%%:   60-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   61:        {
    #####:   62:            Entitate e = creeazaOferta(tip, model, producer, pret, id);
    %%%%%:   62-block  0
call    0 never executed
    #####:   63:            updateOferta(list->lista,e);
call    0 never executed
    #####:   64:            return 0;
        -:   65:        }
        -:   66:
        -:   67:    }
    #####:   68:    return -1;
    %%%%%:   68-block  0
        -:   69:}
        -:   70:
        -:   71:/*Cauta daca un id este in lista*/
function checkId called 0 returned 0% blocks executed 0%
    #####:   72:int checkId(BigList* list,int id)
        -:   73:{
    #####:   74:    if(cauta(list->lista,id) != -1)
    %%%%%:   74-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   75:        return 1;
    %%%%%:   75-block  0
    #####:   76:    return 0;
    %%%%%:   76-block  0
        -:   77:}
        -:   78:
        -:   79:
        -:   80:/*Dealoca tot*/
function destroyAll called 1 returned 100% blocks executed 100%
        1:   81:void destroyAll(BigList* list)
        -:   82:{
        1:   83:    destroyBigList(list);
        1:   83-block  0
call    0 returned 1
        1:   84:}
        -:   85:
function cmpPret called 0 returned 0% blocks executed 0%
    #####:   86:int cmpPret(Oferta* m1, Oferta* m2) {
    #####:   87:    if (m1->pret == m2->pret)
    %%%%%:   87-block  0
branch  0 never executed
branch  1 never executed
    #####:   88:        return 0;
    %%%%%:   88-block  0
    #####:   89:    if (m1->pret > m2->pret)
    %%%%%:   89-block  0
branch  0 never executed
branch  1 never executed
    #####:   90:        return 1;
    %%%%%:   90-block  0
        -:   91:    else
    #####:   92:        return -1;
    %%%%%:   92-block  0
        -:   93:}
        -:   94:
function cmpPretD called 0 returned 0% blocks executed 0%
    #####:   95:int cmpPretD(Oferta* m1, Oferta* m2) {
    #####:   96:    if (m1->pret == m2->pret)
    %%%%%:   96-block  0
branch  0 never executed
branch  1 never executed
    #####:   97:        return 0;
    %%%%%:   97-block  0
    #####:   98:    if (m1->pret < m2->pret)
    %%%%%:   98-block  0
branch  0 never executed
branch  1 never executed
    #####:   99:        return 1;
    %%%%%:   99-block  0
        -:  100:    else
    #####:  101:        return -1;
    %%%%%:  101-block  0
        -:  102:}
        -:  103:
function cmpDestinatie called 0 returned 0% blocks executed 0%
    #####:  104:int cmpDestinatie(Oferta* m1, Oferta* m2) {
        -:  105:    /*if (strcmp(m1->destinatie, m2->destinatie) > 0)
        -:  106:        return 1;
        -:  107:    if (strcmp(m1->destinatie, m2->destinatie) < 0)
        -:  108:        return -1;
        -:  109:    else
        -:  110:        return 0;*/
    #####:  111:}
        -:  112:
function cmpDestinatieD called 0 returned 0% blocks executed 0%
    #####:  113:int cmpDestinatieD(Oferta* m1, Oferta* m2) {
        -:  114:    /*if (strcmp(m1->destinatie, m2->destinatie) > 0)
        -:  115:        return -1;
        -:  116:    if (strcmp(m1->destinatie, m2->destinatie) < 0)
        -:  117:        return 1;
        -:  118:    else
        -:  119:        return 0;*/
    #####:  120:}
        -:  121:
function sortPret called 0 returned 0% blocks executed 0%
    #####:  122:BigList* sortPret(BigList* l) {
    #####:  123:    sort(l->lista, cmpPret);
    %%%%%:  123-block  0
call    0 never executed
    #####:  124:    return l;
        -:  125:}
        -:  126:
function sortPretD called 0 returned 0% blocks executed 0%
    #####:  127:BigList* sortPretD(BigList* l) {
    #####:  128:    sort(l->lista, cmpPretD);
    %%%%%:  128-block  0
call    0 never executed
    #####:  129:    return l;
        -:  130:}
        -:  131:
function sortDestinatie called 0 returned 0% blocks executed 0%
    #####:  132:BigList* sortDestinatie(BigList* l) {
    #####:  133:    sort(l->lista, cmpDestinatie);
    %%%%%:  133-block  0
call    0 never executed
    #####:  134:    return l;
        -:  135:}
function sortDestinatieD called 0 returned 0% blocks executed 0%
    #####:  136:BigList* sortDestinatieD(BigList* l) {
    #####:  137:    sort(l->lista, cmpDestinatieD);
    %%%%%:  137-block  0
call    0 never executed
    #####:  138:    return l;
        -:  139:}
        -:  140:
        -:  141:/*Filtreaza ofertele care au pretul mai mic decat o valoare data*/
function filterPret called 0 returned 0% blocks executed 0%
    #####:  142:Offerte* filterPret(BigList* list, int val)
        -:  143:{
    #####:  144:    Offerte* f = copy(list->lista);
    %%%%%:  144-block  0
call    0 never executed
        -:  145:
    #####:  146:    for(int i=0; i<f->dimensiune;i++)
    %%%%%:  146-block  0
    %%%%%:  146-block  1
branch  0 never executed
branch  1 never executed
        -:  147:    {
    #####:  148:        Oferta* m = get(f,i);
    %%%%%:  148-block  0
call    0 never executed
    #####:  149:        if(m->pret > val)
branch  0 never executed
branch  1 never executed
    #####:  150:            deleteEntitate(f,m->id), i--;
    %%%%%:  150-block  0
call    0 never executed
        -:  151:    }
    #####:  152:    return f;
    %%%%%:  152-block  0
        -:  153:}
        -:  154:
        -:  155:/*Filtreaza ofertele dupa tip*/
function filterTip called 0 returned 0% blocks executed 0%
    #####:  156:Offerte* filterTip(BigList* list, char litera)
        -:  157:{
    #####:  158:    Offerte* f = copy(list->lista);
    %%%%%:  158-block  0
call    0 never executed
        -:  159:
    #####:  160:    for(int i=0; i<f->dimensiune;i++)
    %%%%%:  160-block  0
    %%%%%:  160-block  1
branch  0 never executed
branch  1 never executed
        -:  161:    {
    #####:  162:        Oferta* m = get(f,i);
    %%%%%:  162-block  0
call    0 never executed
    #####:  163:        if(m->tip[0] != litera)
branch  0 never executed
branch  1 never executed
    #####:  164:            deleteEntitate(f,m->id), i--;
    %%%%%:  164-block  0
call    0 never executed
        -:  165:    }
        -:  166:
    #####:  167:    return f;
    %%%%%:  167-block  0
        -:  168:}
