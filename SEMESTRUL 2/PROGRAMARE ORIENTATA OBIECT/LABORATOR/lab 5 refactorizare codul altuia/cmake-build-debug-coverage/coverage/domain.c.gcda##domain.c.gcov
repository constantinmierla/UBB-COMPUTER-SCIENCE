        -:    0:Source:/mnt/d/FMI UBB CLUJ 2023-2026/UBB-COMPUTER-SCIENCE/SEMESTRUL 2/PROGRAMARE ORIENTATA OBIECT/LABORATOR/lab 5 refactorizare codul altuia/domain.c
        -:    0:Graph:/mnt/d/FMI UBB CLUJ 2023-2026/UBB-COMPUTER-SCIENCE/SEMESTRUL 2/PROGRAMARE ORIENTATA OBIECT/LABORATOR/lab 5 refactorizare codul altuia/cmake-build-debug-coverage/CMakeFiles/lab_2.dir/domain.c.gcno
        -:    0:Data:/mnt/d/FMI UBB CLUJ 2023-2026/UBB-COMPUTER-SCIENCE/SEMESTRUL 2/PROGRAMARE ORIENTATA OBIECT/LABORATOR/lab 5 refactorizare codul altuia/cmake-build-debug-coverage/CMakeFiles/lab_2.dir/domain.c.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by Costi on 06-Mar-24.
        -:    3://
        -:    4:
        -:    5:#include "domain.h"
        -:    6:
        -:    7:#include <stdlib.h>
        -:    8:#include <string.h>
        -:    9:
        -:   10:/*
        -:   11: * Creeaza o oferta noua.
        -:   12: *
        -:   13: * Parametri:
        -:   14: *   - tip: tipul ofertei (char*)
        -:   15: *   - destinatie: destinatia ofertei (char*)
        -:   16: *   - data_plecarii: data plecarii (char*)
        -:   17: *   - pret: pretul ofertei (float)
        -:   18: *
        -:   19: * Returneaza:
        -:   20: *   oferta - o structura reprezentand o oferta cu specificatiile date
        -:   21: */
function creeazaOferta called 0 returned 0% blocks executed 0%
    #####:   22:Oferta* creeazaOferta(char* tip,char* model, char* producer, int pret,int id)
        -:   23:{
    #####:   24:    Oferta* p =(Oferta*) malloc(sizeof(Oferta));
        -:   25:
        -:   26:
    #####:   27:    p->id = id;
        -:   28:
    #####:   29:    int nr = (int)strlen(tip) + 1;
    #####:   30:    p->tip = (char*)malloc(sizeof(char)*nr);
    #####:   31:    strcpy(p->tip, tip);
        -:   32:
    #####:   33:    nr = (int)strlen(model) + 1;
    #####:   34:    p->model = (char*)malloc(sizeof(char)*nr);
    #####:   35:    strcpy(p->model, model);
    #####:   36:    nr = (int)strlen(producer) + 1;
    #####:   37:    p->producer = (char*)malloc(sizeof(char)*nr);
    #####:   38:    strcpy(p->producer, producer);
    #####:   39:    p->pret = pret;
    #####:   40:    p->id = id;
        -:   41:
    #####:   42:    return p;
    %%%%%:   42-block  0
        -:   43:}
        -:   44://Copiaza oferta
function copyOferta called 0 returned 0% blocks executed 0%
    #####:   45:Oferta* copyOferta(Oferta* o)
        -:   46:{
    #####:   47:    Oferta* p =(Oferta*) malloc(sizeof(Oferta));
        -:   48:
    #####:   49:    p->id = o->id;
        -:   50:
    #####:   51:    p->tip = (char*)malloc(sizeof(char)*(strlen(o->tip)+1));
    #####:   52:    strcpy(p->tip,o->tip);
        -:   53:
    #####:   54:    p->model = (char*)malloc(sizeof(char)*(strlen(o->model)+1));
    #####:   55:    strcpy(p->model,o->model);
        -:   56:
    #####:   57:    p->producer = (char*)malloc(sizeof(char)*(strlen(o->producer)+1));
    #####:   58:    strcpy(p->producer,o->producer);
        -:   59:
    #####:   60:    p->pret = o->pret;
        -:   61:
    #####:   62:    return p;
    %%%%%:   62-block  0
        -:   63:}
        -:   64:
        -:   65:/*
        -:   66: * Distruge o oferta.
        -:   67: *
        -:   68: * Parametri:
        -:   69: *   - o: oferta de distrus (oferta*)
        -:   70: */
function destroyOferta called 0 returned 0% blocks executed 0%
    #####:   71:void destroyOferta(Oferta* o)
        -:   72:{
    #####:   73:    free(o->producer);
    #####:   74:    free(o->tip);
    #####:   75:    free(o->model);
    #####:   76:    free(o);
    #####:   77:}
        -:   78:
        -:   79://Primeste ID
function getId called 0 returned 0% blocks executed 0%
    #####:   80:int getId(Oferta* o)
        -:   81:{
    #####:   82:    return o->id;
    %%%%%:   82-block  0
        -:   83:}
        -:   84:
        -:   85://Primeste pret
function getPret called 0 returned 0% blocks executed 0%
    #####:   86:int getPret(Oferta* p)
        -:   87:{
    #####:   88:    return p->pret;
    %%%%%:   88-block  0
        -:   89:}
        -:   90:
        -:   91:
        -:   92://Seteaza pret
function setPret called 0 returned 0% blocks executed 0%
    #####:   93:void setPret(Oferta* o,int pret_nou) //pt modificare
        -:   94:{
    #####:   95:    o->pret = pret_nou;
    #####:   96:}
        -:   97:
        -:   98:
        -:   99:/*
        -:  100: * Valideaza o oferta.
        -:  101: *
        -:  102: * Parametri:
        -:  103: *   - o: oferta de validat (oferta)
        -:  104: *
        -:  105: * Returneaza:
        -:  106: *   int - 1 daca oferta este valida, 0 altfel
        -:  107: */
function valideazaOferta called 0 returned 0% blocks executed 0%
    #####:  108:int valideazaOferta(Oferta* o)
        -:  109:{
    #####:  110:    if(o->id<=0)
    %%%%%:  110-block  0
branch  0 never executed
branch  1 never executed
    #####:  111:        return -1;
    %%%%%:  111-block  0
    #####:  112:    if(o->pret<=0)
    %%%%%:  112-block  0
branch  0 never executed
branch  1 never executed
    #####:  113:        return -1;
    %%%%%:  113-block  0
    #####:  114:    if(strlen(o->tip)<1)
    %%%%%:  114-block  0
branch  0 never executed
branch  1 never executed
    #####:  115:        return -1;
    %%%%%:  115-block  0
    #####:  116:    if(strlen(o->model)<1)
    %%%%%:  116-block  0
branch  0 never executed
branch  1 never executed
    #####:  117:        return -1;
    %%%%%:  117-block  0
    #####:  118:    if(strlen(o->producer)<1)
    %%%%%:  118-block  0
branch  0 never executed
branch  1 never executed
    #####:  119:        return -1;
    %%%%%:  119-block  0
        -:  120:
    #####:  121:    return 1;
    %%%%%:  121-block  0
        -:  122:}
