        -:    0:Source:/mnt/d/FMI UBB CLUJ 2023-2026/UBB-COMPUTER-SCIENCE/SEMESTRUL 2/PROGRAMARE ORIENTATA OBIECT/LABORATOR/lab 5 refactorizare codul altuia/domain.c
        -:    0:Graph:/mnt/d/FMI UBB CLUJ 2023-2026/UBB-COMPUTER-SCIENCE/SEMESTRUL 2/PROGRAMARE ORIENTATA OBIECT/LABORATOR/lab 5 refactorizare codul altuia/cmake-build-debug-coverage/CMakeFiles/lab_2.dir/domain.c.gcno
        -:    0:Data:/mnt/d/FMI UBB CLUJ 2023-2026/UBB-COMPUTER-SCIENCE/SEMESTRUL 2/PROGRAMARE ORIENTATA OBIECT/LABORATOR/lab 5 refactorizare codul altuia/cmake-build-debug-coverage/CMakeFiles/lab_2.dir/domain.c.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by Costi on 06-Mar-24.
        -:    3://
        -:    4:
        -:    5:#include "domain.h"
        -:    6:
        -:    7:#include <stdlib.h>
        -:    8:#include <string.h>
        -:    9:
        -:   10:/*
        -:   11: * Creeaza o oferta noua.
        -:   12: *
        -:   13: * Parametri:
        -:   14: *   - tip: tipul ofertei (char*)
        -:   15: *   - destinatie: destinatia ofertei (char*)
        -:   16: *   - data_plecarii: data plecarii (char*)
        -:   17: *   - pret: pretul ofertei (float)
        -:   18: *
        -:   19: * Returneaza:
        -:   20: *   oferta - o structura reprezentand o oferta cu specificatiile date
        -:   21: */
function creeazaOferta called 46 returned 100% blocks executed 100%
       46:   22:Oferta* creeazaOferta(char* tip,char* model, char* producer, int pret,int id, int stoc)
        -:   23:{
       46:   24:    Oferta* p =(Oferta*) malloc(sizeof(Oferta));
        -:   25:
        -:   26:
       46:   27:    p->id = id;
        -:   28:
       46:   29:    int nr = (int)strlen(tip) + 1;
       46:   30:    p->tip = (char*)malloc(sizeof(char)*nr);
       46:   31:    strcpy(p->tip, tip);
        -:   32:
       46:   33:    nr = (int)strlen(model) + 1;
       46:   34:    p->model = (char*)malloc(sizeof(char)*nr);
       46:   35:    strcpy(p->model, model);
       46:   36:    nr = (int)strlen(producer) + 1;
       46:   37:    p->producer = (char*)malloc(sizeof(char)*nr);
       46:   38:    strcpy(p->producer, producer);
       46:   39:    p->pret = pret;
       46:   40:    p->id = id;
       46:   41:    p->stoc = stoc;
       46:   42:    return p;
       46:   42-block  0
        -:   43:}
        -:   44://Copiaza oferta
function copyOferta called 27 returned 100% blocks executed 100%
       27:   45:Oferta* copyOferta(Oferta* o)
        -:   46:{
       27:   47:    Oferta* p =(Oferta*) malloc(sizeof(Oferta));
        -:   48:
       27:   49:    p->id = o->id;
        -:   50:
       27:   51:    p->tip = (char*)malloc(sizeof(char)*(strlen(o->tip)+1));
       27:   52:    strcpy(p->tip,o->tip);
        -:   53:
       27:   54:    p->model = (char*)malloc(sizeof(char)*(strlen(o->model)+1));
       27:   55:    strcpy(p->model,o->model);
        -:   56:
       27:   57:    p->producer = (char*)malloc(sizeof(char)*(strlen(o->producer)+1));
       27:   58:    strcpy(p->producer,o->producer);
        -:   59:
       27:   60:    p->pret = o->pret;
       27:   61:    p->stoc = o->stoc;
       27:   62:    return p;
       27:   62-block  0
        -:   63:}
        -:   64:
        -:   65:/*
        -:   66: * Distruge o oferta.
        -:   67: *
        -:   68: * Parametri:
        -:   69: *   - o: oferta de distrus (oferta*)
        -:   70: */
function destroyOferta called 73 returned 100% blocks executed 100%
       73:   71:void destroyOferta(Oferta* o)
        -:   72:{
       73:   73:    free(o->producer);
       73:   74:    free(o->tip);
       73:   75:    free(o->model);
       73:   76:    free(o);
       73:   77:}
        -:   78:
        -:   79://Primeste ID
function getId called 4 returned 100% blocks executed 100%
        4:   80:int getId(Oferta* o)
        -:   81:{
        4:   82:    return o->id;
        4:   82-block  0
        -:   83:}
        -:   84:
        -:   85://Primeste pret
function getPret called 7 returned 100% blocks executed 100%
        7:   86:int getPret(Oferta* p)
        -:   87:{
        7:   88:    return p->pret;
        7:   88-block  0
        -:   89:}
        -:   90:
function getStoc called 4 returned 100% blocks executed 100%
        4:   91:int getStoc(Oferta* p)
        -:   92:{
        4:   93:    return p->stoc;
        4:   93-block  0
        -:   94:}
        -:   95://Seteaza pret
function setPret called 1 returned 100% blocks executed 100%
        1:   96:void setPret(Oferta* o,int pret_nou) //pt modificare
        -:   97:{
        1:   98:    o->pret = pret_nou;
        1:   99:}
        -:  100:
        -:  101:
        -:  102:/*
        -:  103: * Valideaza o oferta.
        -:  104: *
        -:  105: * Parametri:
        -:  106: *   - o: oferta de validat (oferta)
        -:  107: *
        -:  108: * Returneaza:
        -:  109: *   int - 1 daca oferta este valida, 0 altfel
        -:  110: */
function valideazaOferta called 19 returned 100% blocks executed 100%
       19:  111:int valideazaOferta(Oferta* o)
        -:  112:{
       19:  113:    if(o->id<=0)
       19:  113-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 15
        4:  114:        return -1;
        4:  114-block  0
       15:  115:    if(o->pret<=0)
       15:  115-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 14
        1:  116:        return -1;
        1:  116-block  0
       14:  117:    if(o->stoc<=0)
       14:  117-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 13
        1:  118:        return -1;
        1:  118-block  0
       13:  119:    if(strlen(o->tip)<1)
       13:  119-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 12
        1:  120:        return -1;
        1:  120-block  0
       12:  121:    if(strlen(o->model)<1)
       12:  121-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 11
        1:  122:        return -1;
        1:  122-block  0
       11:  123:    if(strlen(o->producer)<1)
       11:  123-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 10
        1:  124:        return -1;
        1:  124-block  0
        -:  125:
       10:  126:    return 1;
       10:  126-block  0
        -:  127:}
