        -:    0:Source:D:/FMI UBB CLUJ 2023-2026/UBB-COMPUTER-SCIENCE/SEMESTRUL 2/PROGRAMARE ORIENTATA OBIECT/LABORATOR/lab 3 dinamic/service.c
        -:    0:Graph:D:\FMI UBB CLUJ 2023-2026\UBB-COMPUTER-SCIENCE\SEMESTRUL 2\PROGRAMARE ORIENTATA OBIECT\LABORATOR\lab 3 dinamic\cmake-build-debug-coverage\CMakeFiles\lab_2.dir\service.c.gcno
        -:    0:Data:D:\FMI UBB CLUJ 2023-2026\UBB-COMPUTER-SCIENCE\SEMESTRUL 2\PROGRAMARE ORIENTATA OBIECT\LABORATOR\lab 3 dinamic\cmake-build-debug-coverage\CMakeFiles\lab_2.dir\service.c.gcda
        -:    0:Runs:1
        -:    1:#include<stdlib.h>
        -:    2:#include<string.h>
        -:    3:#include <stdio.h>
        -:    4:#include "service.h"
        -:    5:#include "domain.h"
        -:    6:#include "repository.h"
        -:    7:#include "sort.h"
function createBigList called 12 returned 100% blocks executed 100%
       12:    8:BigList createBigList()
        -:    9:{
        -:   10:    BigList listaMeds;
       12:   11:    listaMeds.lista = creeazaOfferte();
       12:   11-block  0
call    0 returned 12
       12:   12:    return listaMeds;
        -:   13:}
        -:   14:
function destroyBigList called 11 returned 100% blocks executed 100%
       11:   15:void destroyBigList(BigList* list)
        -:   16:{
       11:   17:    destroyOfferte(list->lista);
       11:   17-block  0
call    0 returned 11
       11:   18:}
        -:   19:
        -:   20:/*Adauga  o oferta in lista.
        -:   21: * Pre: list- de tip BigList*
        -:   22: * Post: 0 daca entitatea exista deja in lista, 1 altfel
        -:   23: */
function addEnt called 14 returned 100% blocks executed 100%
       14:   24:int addEnt(BigList* list, char* tip,char* destinatie, char* data_plecarii, int pret,int id)
        -:   25:{
       14:   26:    Oferta* e = creeazaOferta(tip,destinatie,data_plecarii,pret,id);
       14:   26-block  0
call    0 returned 14
       14:   27:    if(valideazaOferta(e) == 1)
call    0 returned 14
branch  1 taken 13 (fallthrough)
branch  2 taken 1
        -:   28:    {
       13:   29:        addEntitate(list->lista,e);
       13:   29-block  0
call    0 returned 13
       13:   30:        return 1;
        -:   31:    }
        -:   32:    else
        -:   33:    {
        1:   34:        destroyOferta(e);
        1:   34-block  0
call    0 returned 1
        1:   35:        return 0;
        -:   36:    }
        -:   37:}
        -:   38:/*Functie care sterge o entitate
        -:   39: *Pre:list de tip BigList*, id de tip int
        -:   40: * Post: 1 daca id-ul este in lista si a fost sters, 0 altfel
        -:   41: */
function deleteEnt called 2 returned 100% blocks executed 100%
        2:   42:int deleteEnt(BigList* list,int id)
        -:   43:{
        2:   44:    if(checkId(list,id))
        2:   44-block  0
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        -:   45:    {
        1:   46:        deleteEntitate(list->lista,id);
        1:   46-block  0
call    0 returned 1
        1:   47:        return 1;
        -:   48:    }
        1:   49:    return 0;
        1:   49-block  0
        -:   50:}
        -:   51:
        -:   52:/*Face update .
        -:   53: * Pre: list- de tip BigList*
        -:   54: * Post: 0 daca entitatea exista deja in lista si s-a facut modificarea, 1 altfel
        -:   55: */
function updateEnt called 2 returned 100% blocks executed 100%
        2:   56:int updateEnt(BigList* list,char* tip,char* destinatie, char* data_plecarii, int pret,int id)
        -:   57:{
        3:   58:    for(int i=0;i<list->lista->dimensiune;i++)
        2:   58-block  0
        1:   58-block  1
        3:   58-block  2
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        -:   59:    {
        2:   60:        if(getId(get(list->lista,i))==id)
        2:   60-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        -:   61:        {
        1:   62:            Entitate e = creeazaOferta(tip,destinatie,data_plecarii,pret,id);
        1:   62-block  0
call    0 returned 1
        1:   63:            updateOferta(list->lista,e);
call    0 returned 1
        1:   64:            return 0;
        -:   65:        }
        -:   66:
        -:   67:    }
        1:   68:    return -1;
        1:   68-block  0
        -:   69:}
        -:   70:
        -:   71:/*Cauta daca un id este in lista*/
function checkId called 4 returned 100% blocks executed 100%
        4:   72:int checkId(BigList* list,int id)
        -:   73:{
        4:   74:    if(cauta(list->lista,id) != -1)
        4:   74-block  0
call    0 returned 4
branch  1 taken 2 (fallthrough)
branch  2 taken 2
        2:   75:        return 1;
        2:   75-block  0
        2:   76:    return 0;
        2:   76-block  0
        -:   77:}
        -:   78:
        -:   79:
        -:   80:/*Dealoca tot*/
function destroyAll called 11 returned 100% blocks executed 100%
       11:   81:void destroyAll(BigList* list)
        -:   82:{
       11:   83:    destroyBigList(list);
       11:   83-block  0
call    0 returned 11
       11:   84:}
        -:   85:
function cmpPret called 15 returned 100% blocks executed 100%
       15:   86:int cmpPret(Oferta* m1, Oferta* m2) {
       15:   87:    if (m1->pret == m2->pret)
       15:   87-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 14
        1:   88:        return 0;
        1:   88-block  0
       14:   89:    if (m1->pret > m2->pret)
       14:   89-block  0
branch  0 taken 13 (fallthrough)
branch  1 taken 1
       13:   90:        return 1;
       13:   90-block  0
        -:   91:    else
        1:   92:        return -1;
        1:   92-block  0
        -:   93:}
        -:   94:
function cmpPretD called 9 returned 100% blocks executed 100%
        9:   95:int cmpPretD(Oferta* m1, Oferta* m2) {
        9:   96:    if (m1->pret == m2->pret)
        9:   96-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 8
        1:   97:        return 0;
        1:   97-block  0
        8:   98:    if (m1->pret < m2->pret)
        8:   98-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 7
        1:   99:        return 1;
        1:   99-block  0
        -:  100:    else
        7:  101:        return -1;
        7:  101-block  0
        -:  102:}
        -:  103:
function cmpDestinatie called 9 returned 100% blocks executed 100%
        9:  104:int cmpDestinatie(Oferta* m1, Oferta* m2) {
        9:  105:    if (strcmp(m1->destinatie, m2->destinatie) > 0)
        9:  105-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 7
        2:  106:        return 1;
        2:  106-block  0
        7:  107:    if (strcmp(m1->destinatie, m2->destinatie) < 0)
        7:  107-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 1
        6:  108:        return -1;
        6:  108-block  0
        -:  109:    else
        1:  110:        return 0;
        1:  110-block  0
        -:  111:}
        -:  112:
function cmpDestinatieD called 9 returned 100% blocks executed 100%
        9:  113:int cmpDestinatieD(Oferta* m1, Oferta* m2) {
        9:  114:    if (strcmp(m1->destinatie, m2->destinatie) > 0)
        9:  114-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 7
        2:  115:        return -1;
        2:  115-block  0
        7:  116:    if (strcmp(m1->destinatie, m2->destinatie) < 0)
        7:  116-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 1
        6:  117:        return 1;
        6:  117-block  0
        -:  118:    else
        1:  119:        return 0;
        1:  119-block  0
        -:  120:}
        -:  121:
function sortPret called 1 returned 100% blocks executed 100%
        1:  122:BigList* sortPret(BigList* l) {
        1:  123:    sort(l->lista, cmpPret);
        1:  123-block  0
call    0 returned 1
        1:  124:    return l;
        -:  125:}
        -:  126:
function sortPretD called 1 returned 100% blocks executed 100%
        1:  127:BigList* sortPretD(BigList* l) {
        1:  128:    sort(l->lista, cmpPretD);
        1:  128-block  0
call    0 returned 1
        1:  129:    return l;
        -:  130:}
        -:  131:
function sortDestinatie called 1 returned 100% blocks executed 100%
        1:  132:BigList* sortDestinatie(BigList* l) {
        1:  133:    sort(l->lista, cmpDestinatie);
        1:  133-block  0
call    0 returned 1
        1:  134:    return l;
        -:  135:}
function sortDestinatieD called 1 returned 100% blocks executed 100%
        1:  136:BigList* sortDestinatieD(BigList* l) {
        1:  137:    sort(l->lista, cmpDestinatieD);
        1:  137-block  0
call    0 returned 1
        1:  138:    return l;
        -:  139:}
        -:  140:
        -:  141:/*Filtreaza ofertele care au pretul mai mic decat o valoare data*/
function filterPret called 1 returned 100% blocks executed 100%
        1:  142:Offerte* filterPret(BigList* list, int val)
        -:  143:{
        1:  144:    Offerte* f = copy(list->lista);
        1:  144-block  0
call    0 returned 1
        -:  145:
        6:  146:    for(int i=0; i<f->dimensiune;i++)
        5:  146-block  0
        6:  146-block  1
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        -:  147:    {
        5:  148:        Oferta* m = get(f,i);
        5:  148-block  0
call    0 returned 5
        5:  149:        if(m->pret > val)
branch  0 taken 2 (fallthrough)
branch  1 taken 3
        2:  150:            deleteEntitate(f,m->id), i--;
        2:  150-block  0
call    0 returned 2
        -:  151:    }
        1:  152:    return f;
        1:  152-block  0
        -:  153:}
        -:  154:
        -:  155:/*Filtreaza ofertele dupa tip*/
function filterTip called 1 returned 100% blocks executed 100%
        1:  156:Offerte* filterTip(BigList* list, char litera)
        -:  157:{
        1:  158:    Offerte* f = copy(list->lista);
        1:  158-block  0
call    0 returned 1
        -:  159:
        6:  160:    for(int i=0; i<f->dimensiune;i++)
        5:  160-block  0
        6:  160-block  1
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        -:  161:    {
        5:  162:        Oferta* m = get(f,i);
        5:  162-block  0
call    0 returned 5
        5:  163:        if(m->tip[0] != litera)
branch  0 taken 2 (fallthrough)
branch  1 taken 3
        2:  164:            deleteEntitate(f,m->id), i--;
        2:  164-block  0
call    0 returned 2
        -:  165:    }
        -:  166:
        1:  167:    return f;
        1:  167-block  0
        -:  168:}
