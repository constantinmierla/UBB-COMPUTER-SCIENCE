        -:    0:Source:D:/FMI UBB CLUJ 2023-2026/UBB-COMPUTER-SCIENCE/SEMESTRUL 2/PROGRAMARE ORIENTATA OBIECT/LABORATOR/lab 3 dinamic/tests.c
        -:    0:Graph:D:\FMI UBB CLUJ 2023-2026\UBB-COMPUTER-SCIENCE\SEMESTRUL 2\PROGRAMARE ORIENTATA OBIECT\LABORATOR\lab 3 dinamic\cmake-build-debug-coverage\CMakeFiles\lab_2.dir\tests.c.gcno
        -:    0:Data:D:\FMI UBB CLUJ 2023-2026\UBB-COMPUTER-SCIENCE\SEMESTRUL 2\PROGRAMARE ORIENTATA OBIECT\LABORATOR\lab 3 dinamic\cmake-build-debug-coverage\CMakeFiles\lab_2.dir\tests.c.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by Costi on 12-Mar-24.
        -:    3://
        -:    4:#include "tests.h"
        -:    5:#include "domain.h"
        -:    6:#include "repository.h"
        -:    7:#include "service.h"
        -:    8:#include <assert.h>
        -:    9:#include <string.h>
        -:   10:#include <stdlib.h>
        -:   11:#include <stdio.h>
        -:   12:#include "sort.h"
function testValideazaOferta called 1 returned 100% blocks executed 84%
        1:   13:void testValideazaOferta()
        -:   14:{
        1:   15:    int idRau = -1;
        1:   16:    char* tip = "mere";
        1:   17:    int pretRau = -1;
        1:   18:    char* destinatie = "";
        1:   19:    char* data_plecarii = "";
        -:   20:
        1:   21:    Oferta* o = creeazaOferta(tip,"paris","28.05.2004",15,10);
        1:   21-block  0
call    0 returned 1
       1*:   22:    assert(valideazaOferta(o)==-1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   22-block  0
call    3 never executed
        1:   22-block  1
        -:   23:
        1:   24:    Oferta* o1 = creeazaOferta("mare",destinatie,"28.05.2004",15,1);
        1:   24-block  0
call    0 returned 1
       1*:   25:    assert(valideazaOferta(o1)==-1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   25-block  0
call    3 never executed
        1:   25-block  1
        -:   26:
        1:   27:    Oferta* o2 = creeazaOferta("mare","paris",data_plecarii,15,2);
        1:   27-block  0
call    0 returned 1
       1*:   28:    assert(valideazaOferta(o2)==-1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   28-block  0
call    3 never executed
        1:   28-block  1
        -:   29:
        -:   30:
        1:   31:    Oferta* o3 = creeazaOferta("mare","paris","28.05.2004",pretRau,3);
        1:   31-block  0
call    0 returned 1
       1*:   32:    assert(valideazaOferta(o3)==-1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   32-block  0
call    3 never executed
        1:   32-block  1
        -:   33:
        1:   34:    Oferta* o4 = creeazaOferta("mare","paris","28.05.2004",15,idRau);
        1:   34-block  0
call    0 returned 1
       1*:   35:    assert(valideazaOferta(o4)==-1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   35-block  0
call    3 never executed
        1:   35-block  1
        -:   36:
        1:   37:    Oferta* o5 = creeazaOferta("mare","paris","28.05.2004",15,5);
        1:   37-block  0
call    0 returned 1
       1*:   38:    assert(valideazaOferta(o5)==1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   38-block  0
call    3 never executed
        1:   38-block  1
        -:   39:
        1:   40:    destroyOferta(o);
        1:   40-block  0
call    0 returned 1
        1:   41:    destroyOferta(o1);
call    0 returned 1
        1:   42:    destroyOferta(o2);
call    0 returned 1
        1:   43:    destroyOferta(o3);
call    0 returned 1
        1:   44:    destroyOferta(o4);
call    0 returned 1
        1:   45:    destroyOferta(o5);
call    0 returned 1
        1:   46:}
        -:   47:
function testUpdate called 1 returned 100% blocks executed 86%
        1:   48:void testUpdate()
        -:   49:{
        1:   50:    BigList list = createBigList();
        1:   50-block  0
call    0 returned 1
        1:   51:    Offerte* f = list.lista;
        1:   52:    Oferta* m = creeazaOferta("mare","paris","28.05.2004",15,5);
call    0 returned 1
        1:   53:    setPret(m,12);
call    0 returned 1
        1:   54:    addEntitate(f,m);
call    0 returned 1
        -:   55:
       1*:   56:    assert(updateEnt(&list,"mare","paris","28.05.2004",15,6)==-1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   56-block  0
call    3 never executed
        1:   56-block  1
       1*:   57:    assert(updateEnt(&list,"mare","paris","28.05.2004",12,5)==0);
        1:   57-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   57-block  1
call    3 never executed
        1:   57-block  2
        -:   58:
        1:   59:    destroyAll(&list);
        1:   59-block  0
call    0 returned 1
        -:   60:
        1:   61:}
function testCauta called 1 returned 100% blocks executed 85%
        1:   62:void testCauta()
        -:   63:{
        1:   64:    BigList list = createBigList();
        1:   64-block  0
call    0 returned 1
        1:   65:    Offerte* f = list.lista;
        1:   66:    Oferta * m = creeazaOferta("mare","paris","28.05.2004",15,5);
call    0 returned 1
        1:   67:    addEntitate(f,m);
call    0 returned 1
       1*:   68:    assert(checkId(&list,5)==1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   68-block  0
call    3 never executed
        1:   68-block  1
       1*:   69:    assert(checkId(&list,6)==0);
        1:   69-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   69-block  1
call    3 never executed
        1:   69-block  2
        -:   70:
        1:   71:    destroyAll(&list);
        1:   71-block  0
call    0 returned 1
        1:   72:}
        -:   73:
function testAddEntitate called 1 returned 100% blocks executed 80%
        1:   74:void testAddEntitate()
        -:   75:{
        1:   76:    BigList list = createBigList();
        1:   76-block  0
call    0 returned 1
        -:   77:
        1:   78:    addEnt(&list,"mare","paris1","28.05.2004",15,5);
call    0 returned 1
        1:   79:    addEnt(&list,"mare","paris2","28.05.2004",15,6);
call    0 returned 1
        1:   80:    addEnt(&list,"mare","paris3","28.05.2004",15,7);
call    0 returned 1
       1*:   81:    assert(list.lista->dimensiune==3);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   81-block  0
call    2 never executed
        1:   81-block  1
        1:   82:    Oferta* p = get(list.lista,0);
        1:   82-block  0
call    0 returned 1
        -:   83:
       1*:   84:    assert(5 == p->id);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   84-block  0
call    2 never executed
        1:   84-block  1
       1*:   85:    assert(15 == p->pret);
        1:   85-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   85-block  1
call    2 never executed
        1:   85-block  2
        -:   86:
       1*:   87:    assert(addEnt(&list,"lac","paris1","28.05.2004",15,5)==0);
        1:   87-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   87-block  1
call    3 never executed
        1:   87-block  2
        -:   88:
        1:   89:    destroyAll(&list);
        1:   89-block  0
call    0 returned 1
        -:   90:
        1:   91:}
        -:   92:
function testDeleteEntitate called 1 returned 100% blocks executed 89%
        1:   93:void testDeleteEntitate()
        -:   94:{
        1:   95:    BigList list = createBigList();
        1:   95-block  0
call    0 returned 1
        1:   96:    Offerte* f = list.lista;
        1:   97:    Oferta* m = creeazaOferta("mare","paris","28.05.2004",15,5);
call    0 returned 1
        1:   98:    Oferta* m1 = creeazaOferta("mare","paris","28.05.2004",14,6);
call    0 returned 1
        1:   99:    Oferta* m2 = creeazaOferta("mare","paris","28.05.2004",13,7);
call    0 returned 1
        1:  100:    Oferta* m3 = creeazaOferta("mare","paris","28.05.2004",12,8);
call    0 returned 1
        -:  101:
        1:  102:    addEntitate(f,m);
call    0 returned 1
        1:  103:    addEntitate(f,m1);
call    0 returned 1
        1:  104:    addEntitate(f,m2);
call    0 returned 1
        1:  105:    addEntitate(f,m3);
call    0 returned 1
       1*:  106:    assert(deleteEnt(&list,4)==0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  106-block  0
call    3 never executed
        1:  106-block  1
       1*:  107:    assert(deleteEnt(&list,5)==1);
        1:  107-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  107-block  1
call    3 never executed
        1:  107-block  2
        1:  108:    destroyAll(&list);
        1:  108-block  0
call    0 returned 1
        1:  109:}
        -:  110:
function testAsiguraCapacitate called 1 returned 100% blocks executed 83%
        1:  111:void testAsiguraCapacitate()
        -:  112:{
        1:  113:    Offerte * f = creeazaOfferte();
        1:  113-block  0
call    0 returned 1
        1:  114:    Oferta* m = creeazaOferta("mare","paris","28.05.2004",15,5);
call    0 returned 1
        1:  115:    Oferta* m1 = creeazaOferta("mare","paris","28.05.2004",14,6);
call    0 returned 1
        1:  116:    Oferta* m2 = creeazaOferta("mare","paris","28.05.2004",13,7);
call    0 returned 1
        1:  117:    addEntitate(f,m);
call    0 returned 1
        1:  118:    addEntitate(f,m1);
call    0 returned 1
       1*:  119:    assert(f->capacitate==2);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  119-block  0
call    2 never executed
        1:  119-block  1
        1:  120:    addEntitate(f,m2);
        1:  120-block  0
call    0 returned 1
       1*:  121:    assert(f->capacitate==4);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  121-block  0
call    2 never executed
        1:  121-block  1
       1*:  122:    assert(f->dimensiune==3);
        1:  122-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  122-block  1
call    2 never executed
        1:  122-block  2
        1:  123:    destroyOfferte(f);
        1:  123-block  0
call    0 returned 1
        -:  124:
        1:  125:}
        -:  126:
        -:  127:
        -:  128:/*void testSortareStoc()
        -:  129:{
        -:  130:    BigList list = createBigList();
        -:  131:
        -:  132:    addEnt(&list,19,"nurofen",3,10);
        -:  133:    addEnt(&list,21,"ceva",8,100);
        -:  134:    addEnt(&list,22,"ceva",8,1);
        -:  135:    addEnt(&list,26,"ceva",8,3);
        -:  136:    addEnt(&list,23,"ceva",8,9);
        -:  137:
        -:  138:    Farmacie* f1 = sortareStoc(&list);
        -:  139:
        -:  140:    assert(f1->dimensiune==5);
        -:  141:
        -:  142:    for(int i=0; i<f1->dimensiune-1;i++)
        -:  143:    {
        -:  144:        Medicament* m1 = get(f1,i);
        -:  145:        Medicament* m2 = get(f1,i+1);
        -:  146:        assert(m1->stoc <= m2->stoc);
        -:  147:
        -:  148:    }
        -:  149:
        -:  150:    destroyFarmacie(f1);
        -:  151:    destroyAll(&list);
        -:  152:}*/
        -:  153:
        -:  154:
function testFilterPret called 1 returned 100% blocks executed 84%
        1:  155:void testFilterPret()
        -:  156:{
        1:  157:    BigList list = createBigList();
        1:  157-block  0
call    0 returned 1
        -:  158:
        1:  159:    addEnt(&list,"mare","paris","28.05.2004",15,5);
call    0 returned 1
        1:  160:    addEnt(&list,"mare","paris","28.05.2004",160,6);
call    0 returned 1
        1:  161:    addEnt(&list,"mare","paris","28.05.2004",20,7);
call    0 returned 1
        1:  162:    addEnt(&list,"mare","paris","28.05.2004",140,8);
call    0 returned 1
        1:  163:    addEnt(&list,"mare","paris","28.05.2004",30,9);
call    0 returned 1
        -:  164:
        1:  165:    Offerte * f1 = filterPret(&list,100);
call    0 returned 1
        -:  166:
       1*:  167:    assert(f1->dimensiune == 3);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  167-block  0
call    2 never executed
        1:  167-block  1
       1*:  168:    assert(getPret(f1->oferte[0]) == 15);
        1:  168-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  168-block  1
call    3 never executed
        1:  168-block  2
       1*:  169:    assert(getPret(f1->oferte[1]) == 20);
        1:  169-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  169-block  1
call    3 never executed
        1:  169-block  2
       1*:  170:    assert(getPret(f1->oferte[2]) == 30);
        1:  170-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  170-block  1
call    3 never executed
        1:  170-block  2
        -:  171:
        1:  172:    destroyOfferte(f1);
        1:  172-block  0
call    0 returned 1
        1:  173:    destroyAll(&list);
call    0 returned 1
        1:  174:}
        -:  175:
function testFilterTip called 1 returned 100% blocks executed 84%
        1:  176:void testFilterTip()
        -:  177:{
        1:  178:    BigList list = createBigList();
        1:  178-block  0
call    0 returned 1
        -:  179:
        1:  180:    addEnt(&list,"mare","paris","28.05.2004",15,5);
call    0 returned 1
        1:  181:    addEnt(&list,"MUNTE","paris","28.05.2004",160,6);
call    0 returned 1
        1:  182:    addEnt(&list,"MUNTE","paris","28.05.2004",20,7);
call    0 returned 1
        1:  183:    addEnt(&list,"mare","paris","28.05.2004",140,8);
call    0 returned 1
        1:  184:    addEnt(&list,"mare","paris","28.05.2004",30,9);
call    0 returned 1
        -:  185:
        1:  186:    Offerte * f1 = filterTip(&list,'m');
call    0 returned 1
        -:  187:
       1*:  188:    assert(f1->dimensiune == 3);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  188-block  0
call    2 never executed
        1:  188-block  1
       1*:  189:    assert(getPret(f1->oferte[0]) == 15);
        1:  189-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  189-block  1
call    3 never executed
        1:  189-block  2
       1*:  190:    assert(getPret(f1->oferte[1]) == 140);
        1:  190-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  190-block  1
call    3 never executed
        1:  190-block  2
       1*:  191:    assert(getPret(f1->oferte[2]) == 30);
        1:  191-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  191-block  1
call    3 never executed
        1:  191-block  2
        -:  192:
        1:  193:    destroyOfferte(f1);
        1:  193-block  0
call    0 returned 1
        1:  194:    destroyAll(&list);
call    0 returned 1
        1:  195:}
function testdinsort called 1 returned 100% blocks executed 86%
        1:  196:void testdinsort() {
        1:  197:    BigList list = createBigList();
        1:  197-block  0
call    0 returned 1
        1:  198:    Offerte* f = list.lista;
        1:  199:    Oferta* m = creeazaOferta("mare","paris","28.05.2004",15,5);
call    0 returned 1
        1:  200:    Oferta* m1 = creeazaOferta("mare","paris","28.05.2004",14,6);
call    0 returned 1
        1:  201:    Oferta* m2 = creeazaOferta("mare","paris","28.05.2004",13,7);
call    0 returned 1
        1:  202:    Oferta* m3 = creeazaOferta("mare","paris","28.05.2004",12,8);
call    0 returned 1
        -:  203:
        1:  204:    addEntitate(f,m);
call    0 returned 1
        1:  205:    addEntitate(f,m1);
call    0 returned 1
        1:  206:    addEntitate(f,m2);
call    0 returned 1
        1:  207:    addEntitate(f,m3);
call    0 returned 1
        1:  208:    sort(f, cmpPret);
call    0 returned 1
        -:  209:
        -:  210:    // Assert that the resulting list is sorted
       1*:  211:    assert(getPret(f->oferte[0]) == 12); // First element should have price 12
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  211-block  0
call    3 never executed
        1:  211-block  1
       1*:  212:    assert(getPret(f->oferte[1]) == 13); // Second element should have price 13
        1:  212-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  212-block  1
call    3 never executed
        1:  212-block  2
       1*:  213:    assert(getPret(f->oferte[2]) == 14); // Third element should have price 14
        1:  213-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  213-block  1
call    3 never executed
        1:  213-block  2
       1*:  214:    assert(getPret(f->oferte[3]) == 15); // Fourth element should have price 15
        1:  214-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  214-block  1
call    3 never executed
        1:  214-block  2
        1:  215:    destroyAll(&list);
        1:  215-block  0
call    0 returned 1
        1:  216:}
function testSortingFunctions called 1 returned 100% blocks executed 76%
        1:  217:void testSortingFunctions() {
        -:  218:    // Test cmpPret function
        1:  219:    Oferta oferta1 = {"paris", "dest1", "2024-01-01", 20, 1};
        1:  220:    Oferta oferta2 = {"roma", "dest2", "2024-01-01", 15, 2};
       1*:  221:    assert(cmpPret(&oferta1, &oferta2) > 0);
        1:  221-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  221-block  1
call    3 never executed
        1:  221-block  2
       1*:  222:    assert(cmpPret(&oferta2, &oferta1) < 0);
        1:  222-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  222-block  1
call    3 never executed
        1:  222-block  2
       1*:  223:    assert(cmpPret(&oferta1, &oferta1) == 0);
        1:  223-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  223-block  1
call    3 never executed
        1:  223-block  2
        -:  224:
        -:  225:    // Test cmpPretD function
       1*:  226:    assert(cmpPretD(&oferta1, &oferta2) < 0);
        1:  226-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  226-block  1
call    3 never executed
        1:  226-block  2
       1*:  227:    assert(cmpPretD(&oferta2, &oferta1) > 0);
        1:  227-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  227-block  1
call    3 never executed
        1:  227-block  2
       1*:  228:    assert(cmpPretD(&oferta1, &oferta1) == 0);
        1:  228-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  228-block  1
call    3 never executed
        1:  228-block  2
        -:  229:
        -:  230:    // Test cmpDestinatie function
       1*:  231:    assert(cmpDestinatie(&oferta1, &oferta2) < 0);
        1:  231-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  231-block  1
call    3 never executed
        1:  231-block  2
       1*:  232:    assert(cmpDestinatie(&oferta2, &oferta1) > 0);
        1:  232-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  232-block  1
call    3 never executed
        1:  232-block  2
       1*:  233:    assert(cmpDestinatie(&oferta1, &oferta1) == 0);
        1:  233-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  233-block  1
call    3 never executed
        1:  233-block  2
        -:  234:
        -:  235:
        -:  236:    // Test cmpDestinatieD function
       1*:  237:    assert(cmpDestinatieD(&oferta1, &oferta2) > 0);
        1:  237-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  237-block  1
call    3 never executed
        1:  237-block  2
       1*:  238:    assert(cmpDestinatieD(&oferta2, &oferta1) < 0);
        1:  238-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  238-block  1
call    3 never executed
        1:  238-block  2
       1*:  239:    assert(cmpDestinatieD(&oferta1, &oferta1) == 0);
        1:  239-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  239-block  1
call    3 never executed
        1:  239-block  2
        -:  240:
        1:  241:}
function testesortpret called 1 returned 100% blocks executed 94%
        1:  242:void testesortpret()
        -:  243:{
        1:  244:    BigList list = createBigList();
        1:  244-block  0
call    0 returned 1
        -:  245:
        1:  246:    Offerte* f = list.lista;
        1:  247:    Oferta* m = creeazaOferta("mare","paris","28.05.2004",15,5);
call    0 returned 1
        1:  248:    Oferta* m1 = creeazaOferta("mare","paris","28.05.2004",14,6);
call    0 returned 1
        1:  249:    Oferta* m2 = creeazaOferta("mare","paris","28.05.2004",13,7);
call    0 returned 1
        1:  250:    Oferta* m3 = creeazaOferta("mare","paris","28.05.2004",12,8);
call    0 returned 1
        -:  251:
        1:  252:    addEntitate(f,m);
call    0 returned 1
        1:  253:    addEntitate(f,m1);
call    0 returned 1
        1:  254:    addEntitate(f,m2);
call    0 returned 1
        1:  255:    addEntitate(f,m3);
call    0 returned 1
        1:  256:    BigList* sortedList = sortPret(&list);
call    0 returned 1
       1*:  257:    assert(getPret(sortedList->lista->oferte[0]) == 12);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  257-block  0
call    3 never executed
        1:  257-block  1
        1:  258:    destroyAll(&list);
        1:  258-block  0
call    0 returned 1
        1:  259:}
function testesortpretd called 1 returned 100% blocks executed 94%
        1:  260:void testesortpretd()
        -:  261:{
        1:  262:    BigList list = createBigList();
        1:  262-block  0
call    0 returned 1
        -:  263:
        1:  264:    Offerte* f = list.lista;
        1:  265:    Oferta* m = creeazaOferta("mare","paris","28.05.2004",15,5);
call    0 returned 1
        1:  266:    Oferta* m1 = creeazaOferta("mare","paris","28.05.2004",14,6);
call    0 returned 1
        1:  267:    Oferta* m2 = creeazaOferta("mare","paris","28.05.2004",13,7);
call    0 returned 1
        1:  268:    Oferta* m3 = creeazaOferta("mare","paris","28.05.2004",12,8);
call    0 returned 1
        -:  269:
        1:  270:    addEntitate(f,m);
call    0 returned 1
        1:  271:    addEntitate(f,m1);
call    0 returned 1
        1:  272:    addEntitate(f,m2);
call    0 returned 1
        1:  273:    addEntitate(f,m3);
call    0 returned 1
        1:  274:    BigList* sortedList = sortPretD(&list);
call    0 returned 1
       1*:  275:    assert(getPret(sortedList->lista->oferte[0]) == 15);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  275-block  0
call    3 never executed
        1:  275-block  1
        1:  276:    destroyAll(&list);
        1:  276-block  0
call    0 returned 1
        1:  277:}
function testesortdest called 1 returned 100% blocks executed 94%
        1:  278:void testesortdest()
        -:  279:{
        1:  280:    BigList list = createBigList();
        1:  280-block  0
call    0 returned 1
        -:  281:
        1:  282:    Offerte* f = list.lista;
        1:  283:    Oferta* m = creeazaOferta("mare","paris2","28.05.2004",15,5);
call    0 returned 1
        1:  284:    Oferta* m1 = creeazaOferta("mare","paris1","28.05.2004",14,6);
call    0 returned 1
        1:  285:    Oferta* m2 = creeazaOferta("mare","paris3","28.05.2004",13,7);
call    0 returned 1
        1:  286:    Oferta* m3 = creeazaOferta("mare","paris4","28.05.2004",12,8);
call    0 returned 1
        -:  287:
        1:  288:    addEntitate(f,m);
call    0 returned 1
        1:  289:    addEntitate(f,m1);
call    0 returned 1
        1:  290:    addEntitate(f,m2);
call    0 returned 1
        1:  291:    addEntitate(f,m3);
call    0 returned 1
        1:  292:    BigList* sortedList = sortDestinatie(&list);
call    0 returned 1
       1*:  293:    assert(getPret(sortedList->lista->oferte[0]) == 14);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  293-block  0
call    3 never executed
        1:  293-block  1
        1:  294:    destroyAll(&list);
        1:  294-block  0
call    0 returned 1
        1:  295:}
function testesortdestd called 1 returned 100% blocks executed 94%
        1:  296:void testesortdestd()
        -:  297:{
        1:  298:    BigList list = createBigList();
        1:  298-block  0
call    0 returned 1
        -:  299:
        1:  300:    Offerte* f = list.lista;
        1:  301:    Oferta* m = creeazaOferta("mare","paris2","28.05.2004",15,5);
call    0 returned 1
        1:  302:    Oferta* m1 = creeazaOferta("mare","paris1","28.05.2004",14,6);
call    0 returned 1
        1:  303:    Oferta* m2 = creeazaOferta("mare","paris3","28.05.2004",13,7);
call    0 returned 1
        1:  304:    Oferta* m3 = creeazaOferta("mare","paris4","28.05.2004",12,8);
call    0 returned 1
        -:  305:
        1:  306:    addEntitate(f,m);
call    0 returned 1
        1:  307:    addEntitate(f,m1);
call    0 returned 1
        1:  308:    addEntitate(f,m2);
call    0 returned 1
        1:  309:    addEntitate(f,m3);
call    0 returned 1
        1:  310:    BigList* sortedList = sortDestinatieD(&list);
call    0 returned 1
       1*:  311:    assert(getPret(sortedList->lista->oferte[0]) == 12);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  311-block  0
call    3 never executed
        1:  311-block  1
        1:  312:    destroyAll(&list);
        1:  312-block  0
call    0 returned 1
        1:  313:}
        -:  314:
        -:  315:
function runAllTests called 1 returned 100% blocks executed 100%
        1:  316:void runAllTests()
        -:  317:{
        1:  318:    testValideazaOferta();
        1:  318-block  0
call    0 returned 1
        1:  319:    testCauta();
call    0 returned 1
        1:  320:    testAddEntitate();
call    0 returned 1
        1:  321:    testDeleteEntitate();
call    0 returned 1
        1:  322:    testUpdate();
call    0 returned 1
        1:  323:    testAsiguraCapacitate();
call    0 returned 1
        1:  324:    testFilterPret();
call    0 returned 1
        1:  325:    testFilterTip();
call    0 returned 1
        1:  326:    testdinsort();
call    0 returned 1
        1:  327:    testSortingFunctions();
call    0 returned 1
        1:  328:    testesortdestd();
call    0 returned 1
        1:  329:    testesortpretd();
call    0 returned 1
        1:  330:    testesortpret();
call    0 returned 1
        1:  331:    testesortdest();
call    0 returned 1
        1:  332:}
