        -:    0:Source:D:/FMI UBB CLUJ 2023-2026/UBB-COMPUTER-SCIENCE/SEMESTRUL 2/PROGRAMARE ORIENTATA OBIECT/LABORATOR/lab 4/Service/service.c
        -:    0:Graph:D:\FMI UBB CLUJ 2023-2026\UBB-COMPUTER-SCIENCE\SEMESTRUL 2\PROGRAMARE ORIENTATA OBIECT\LABORATOR\lab 4\cmake-build-debug-coverage\CMakeFiles\Lab2.dir\Service\service.c.gcno
        -:    0:Data:D:\FMI UBB CLUJ 2023-2026\UBB-COMPUTER-SCIENCE\SEMESTRUL 2\PROGRAMARE ORIENTATA OBIECT\LABORATOR\lab 4\cmake-build-debug-coverage\CMakeFiles\Lab2.dir\Service\service.c.gcda
        -:    0:Runs:1
        -:    1:#include <stdlib.h>
        -:    2:#include <string.h>
        -:    3:#include "./service.h"
        -:    4:
function compareProducts called 3 returned 100% blocks executed 100%
        3:    5:int compareProducts(Product productA, Product productB) {
        -:    6:    // Compare by price
        3:    7:    if (productA.price != productB.price) {
        3:    7-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:    8:        return productA.price - productB.price;
        1:    8-block  0
        -:    9:    }
        -:   10:
        -:   11:    // If prices are equal, compare by quantity
        2:   12:    return productA.quantity - productB.quantity;
        2:   12-block  0
        -:   13:}
function initOperationStack called 16 returned 100% blocks executed 100%
       16:   14:void initOperationStack(OperationStack* stack) {
       16:   15:    stack->operations = malloc(sizeof(Operation) * 10);
       16:   16:    stack->size = 0;
       16:   17:    stack->capacity = 10;
       16:   18:}
        -:   19:
function pushOperation called 115 returned 100% blocks executed 100%
      115:   20:void pushOperation(OperationStack* stack, Operation operation) {
      115:   21:    if (stack->size == stack->capacity) {
      115:   21-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 111
        4:   22:        stack->capacity *= 2;
        4:   23:        stack->operations = realloc(stack->operations, sizeof(Operation) * stack->capacity);
        4:   23-block  0
        -:   24:    }
      115:   25:    stack->operations[stack->size++] = operation;
      115:   26:}
        -:   27:
function popOperation called 0 returned 0% blocks executed 0%
    #####:   28:Operation popOperation(OperationStack* stack) {
    #####:   29:    return stack->operations[--stack->size];
    %%%%%:   29-block  0
        -:   30:}
        -:   31:
function setUp called 8 returned 100% blocks executed 100%
        8:   32:void setUp(Service *service) {
        8:   33:    service->id = 0;
        8:   34:    initOperationStack(&service->undoStack); // Add this line
        8:   34-block  0
call    0 returned 8
        8:   35:    initOperationStack(&service->redoStack); // Add this line
call    0 returned 8
        -:   36:
        8:   37:}
        -:   38:
function getAllService called 5 returned 100% blocks executed 100%
        5:   39:Product* getAllService(Service *service) {
        5:   40:    return getAll(service->repository);
        5:   40-block  0
call    0 returned 5
        -:   41:}
        -:   42:
function addProduct called 109 returned 100% blocks executed 100%
      109:   43:int addProduct(Service *service, Product product) {
        -:   44:    Operation operation;
      109:   45:    strcpy(operation.type, "add");
      109:   46:    operation.before = getProduct(*service, product.id);
      109:   46-block  0
call    0 returned 109
      109:   47:    operation.after = product;
      109:   48:    pushOperation(&service->undoStack, operation);
call    0 returned 109
        -:   49:
      109:   50:    product.id = service->id;
      109:   51:    if (validateProduct(product) == 1) {
call    0 returned 109
branch  1 taken 18 (fallthrough)
branch  2 taken 91
       18:   52:        add(service->repository, product);
       18:   52-block  0
call    0 returned 18
       18:   53:        service->id++;
       18:   54:        return 0;
        -:   55:    } else {
       91:   56:        return -1;
       91:   56-block  0
        -:   57:    }
        -:   58:}
        -:   59:
function updatePriceForProduct called 3 returned 100% blocks executed 100%
        3:   60:int updatePriceForProduct(Service *service, int id, int price) {
        -:   61:    Operation operation;
        3:   62:    strcpy(operation.type, "update");
        3:   63:    operation.before = getProduct(*service, id);
        3:   63-block  0
call    0 returned 3
        3:   64:    operation.after = getProduct(*service, id);
call    0 returned 3
        3:   65:    operation.after.price = price;
        3:   66:    pushOperation(&service->undoStack, operation);
call    0 returned 3
        -:   67:
        3:   68:    updatePrice(service->repository, id, price);
call    0 returned 3
        3:   69:    return 0;
        -:   70:}
        -:   71:
function updateQuantityForProduct called 2 returned 100% blocks executed 100%
        2:   72:int updateQuantityForProduct(Service *service, int id, int quantity) {
        -:   73:    Operation operation;
        2:   74:    strcpy(operation.type, "update");
        2:   75:    operation.before = getProduct(*service, id);
        2:   75-block  0
call    0 returned 2
        2:   76:    operation.after = getProduct(*service, id);
call    0 returned 2
        2:   77:    operation.after.quantity = quantity;
        2:   78:    pushOperation(&service->undoStack, operation);
call    0 returned 2
        -:   79:
        2:   80:    updateQuantity(service->repository, id, quantity);
call    0 returned 2
        2:   81:    return 0;
        -:   82:}
        -:   83:
function deleteProduct called 1 returned 100% blocks executed 100%
        1:   84:int deleteProduct(Service *service, int id) {
        -:   85:    Operation operation;
        1:   86:    strcpy(operation.type, "delete");
        1:   87:    operation.before = getProduct(*service, id);
        1:   87-block  0
call    0 returned 1
        1:   88:    operation.after = getProduct(*service, id);
call    0 returned 1
        1:   89:    pushOperation(&service->undoStack, operation);
call    0 returned 1
        -:   90:
        1:   91:    delete(service->repository, id);
call    0 returned 1
        1:   92:    return 0;
        -:   93:}
        -:   94:
function getProduct called 124 returned 100% blocks executed 100%
      124:   95:Product getProduct(Service service, int id) {
      124:   96:    Product a = find(*service.repository, id);
      124:   96-block  0
call    0 returned 124
      124:   97:    return a;
        -:   98:}
        -:   99:
function customSortProducts called 1 returned 100% blocks executed 92%
        1:  100:void customSortProducts(Product* products, int size, int (*compare)(Product productA, Product productB), int reverse) {
        3:  101:    for (int i = 0; i < size - 1; ++i) {
        1:  101-block  0
        2:  101-block  1
        3:  101-block  2
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        5:  102:        for (int j = 0; j < size - i - 1; ++j) {
        2:  102-block  0
        3:  102-block  1
        5:  102-block  2
branch  0 taken 3
branch  1 taken 2 (fallthrough)
        3:  103:            int comparisonResult = compare(products[j], products[j + 1]);
        3:  103-block  0
call    0 returned 3
       3*:  104:            if ((reverse == 1 && comparisonResult > 0) || (reverse == 2 && comparisonResult < 0)) {
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:  104-block  0
branch  2 taken 2 (fallthrough)
branch  3 taken 1
        2:  104-block  1
branch  4 taken 0 (fallthrough)
branch  5 taken 2
    %%%%%:  104-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
        -:  105:                // Swap products
        1:  106:                Product temp = products[j];
        1:  107:                products[j] = products[j + 1];
        1:  108:                products[j + 1] = temp;
        1:  108-block  0
        -:  109:            }
        -:  110:        }
        -:  111:    }
        1:  112:}
        -:  113:
function sortProducts called 1 returned 100% blocks executed 100%
        1:  114:Product *sortProducts(Service service, int reverse) {
        1:  115:    Product* products = getAllService(&service);
        1:  115-block  0
call    0 returned 1
        1:  116:    int size = service.repository->count;
        -:  117:    // Allocate memory for the copy of sorted products
        1:  118:    Product *sortedProducts = malloc(size * sizeof(Product));
        -:  119:    // Copy the pointers from the original array to the copy
        1:  120:    memcpy(sortedProducts, products, size * sizeof(Product));
        -:  121:
        -:  122:    // Sort the copied array
        1:  123:    customSortProducts(sortedProducts, size, compareProducts, reverse);
call    0 returned 1
        -:  124:
        1:  125:    return sortedProducts;
        -:  126:}
        -:  127:
function filterProducts called 3 returned 100% blocks executed 100%
        3:  128:Product* filterProducts(Service service, const char* criteria, int value, int* filteredSize, char* producer) {
        -:  129:    // Allocate memory for the filtered products
        3:  130:    Product* products = getAllService(&service);
        3:  130-block  0
call    0 returned 3
        3:  131:    int size = service.repository->count;
        3:  132:    Product* filteredProducts = malloc(size * sizeof(Product));
        -:  133:
        3:  134:    *filteredSize = 0;
        -:  135:
       12:  136:    for (int i = 0; i < size; ++i) {
        9:  136-block  0
       12:  136-block  1
branch  0 taken 9
branch  1 taken 3 (fallthrough)
        9:  137:        if (strcmp(criteria, "price") == 0 && products[i].price == value) {
        9:  137-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 6
        3:  137-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 2
        1:  138:            filteredProducts[(*filteredSize)++] = products[i];
        1:  138-block  0
        8:  139:        } else if (strcmp(criteria, "quantity") == 0 && products[i].quantity == value) {
        8:  139-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 5
        3:  139-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 2
        1:  140:            filteredProducts[(*filteredSize)++] = products[i];
        1:  140-block  0
        7:  141:        } else if (strcmp(criteria, "producer") == 0 && strcmp(products[i].producer, producer) == 0) {
        7:  141-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 4
        3:  141-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 2
        1:  142:            filteredProducts[(*filteredSize)++] = products[i];
        1:  142-block  0
        -:  143:        }
        -:  144:    }
        -:  145:
        3:  146:    filteredProducts = realloc(filteredProducts, (*filteredSize) * sizeof(Product));
        -:  147:
        3:  148:    return filteredProducts;
        3:  148-block  0
        -:  149:}
        -:  150:
function undo called 0 returned 0% blocks executed 0%
    #####:  151:int undo(Service *service) {
    #####:  152:    if (service->undoStack.size == 0) {
    %%%%%:  152-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  153:        return 0;
    %%%%%:  153-block  0
        -:  154:    }
        -:  155:
    #####:  156:    Operation operation = popOperation(&service->undoStack);
    %%%%%:  156-block  0
call    0 never executed
    #####:  157:    pushOperation(&service->redoStack, operation); // Add this line
call    0 never executed
        -:  158:
    #####:  159:    if (strcmp(operation.type, "add") == 0) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  160:        deleteProduct(service, operation.after.id);
    %%%%%:  160-block  0
call    0 never executed
    #####:  161:    } else if (strcmp(operation.type, "delete") == 0) {
    %%%%%:  161-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  162:        addProduct(service, operation.before);
    %%%%%:  162-block  0
call    0 never executed
    #####:  163:    } else if (strcmp(operation.type, "update") == 0) {
    %%%%%:  163-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  164:        updatePriceForProduct(service, operation.before.id, operation.before.price);
    %%%%%:  164-block  0
call    0 never executed
    #####:  165:        updateQuantityForProduct(service, operation.before.id, operation.before.quantity);
call    0 never executed
        -:  166:    }
        -:  167:
    #####:  168:    return 1;
    %%%%%:  168-block  0
        -:  169:}
        -:  170:
function redo called 0 returned 0% blocks executed 0%
    #####:  171:int redo(Service *service) {
    #####:  172:    if (service->redoStack.size == 0) {
    %%%%%:  172-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  173:        return 0;
    %%%%%:  173-block  0
        -:  174:    }
        -:  175:
    #####:  176:    Operation operation = popOperation(&service->redoStack);
    %%%%%:  176-block  0
call    0 never executed
    #####:  177:    pushOperation(&service->undoStack, operation); // Add this line
call    0 never executed
        -:  178:
    #####:  179:    if (strcmp(operation.type, "add") == 0) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  180:        addProduct(service, operation.after);
    %%%%%:  180-block  0
call    0 never executed
    #####:  181:    } else if (strcmp(operation.type, "delete") == 0) {
    %%%%%:  181-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  182:        deleteProduct(service, operation.before.id);
    %%%%%:  182-block  0
call    0 never executed
    #####:  183:    } else if (strcmp(operation.type, "update") == 0) {
    %%%%%:  183-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  184:        updatePriceForProduct(service, operation.after.id, operation.after.price);
    %%%%%:  184-block  0
call    0 never executed
    #####:  185:        updateQuantityForProduct(service, operation.after.id, operation.after.quantity);
call    0 never executed
        -:  186:    }
        -:  187:
    #####:  188:    return 1;
    %%%%%:  188-block  0
        -:  189:}
