        -:    0:Source:D:/FMI UBB CLUJ 2023-2026/UBB-COMPUTER-SCIENCE/SEMESTRUL 2/PROGRAMARE ORIENTATA OBIECT/LABORATOR/lab 4/UI/ui.c
        -:    0:Graph:D:\FMI UBB CLUJ 2023-2026\UBB-COMPUTER-SCIENCE\SEMESTRUL 2\PROGRAMARE ORIENTATA OBIECT\LABORATOR\lab 4\cmake-build-debug-coverage\CMakeFiles\Lab2.dir\UI\ui.c.gcno
        -:    0:Data:D:\FMI UBB CLUJ 2023-2026\UBB-COMPUTER-SCIENCE\SEMESTRUL 2\PROGRAMARE ORIENTATA OBIECT\LABORATOR\lab 4\cmake-build-debug-coverage\CMakeFiles\Lab2.dir\UI\ui.c.gcda
        -:    0:Runs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include "./ui.h"
        -:    4:
        -:    5:#define BUFFER_SIZE 100
        -:    6:
function showMenu called 1 returned 100% blocks executed 100%
        1:    7:void showMenu() {
        1:    8:    printf("1. Adauga Produs\n");
        1:    8-block  0
call    0 returned 1
        1:    9:    printf("2. Actualizeaza Produs\n");
call    0 returned 1
        1:   10:    printf("3. Sterge Produs\n");
call    0 returned 1
        1:   11:    printf("4. Lista Produse\n");
call    0 returned 1
        1:   12:    printf("5. Filtrare produse dupa criteriu (producator, pret, cantitate)\n");
call    0 returned 1
        1:   13:    printf("6. Exit\n");
call    0 returned 1
        1:   14:    printf("7. Undo\n");
call    0 returned 1
        1:   15:}
        -:   16:
function uiAdaugaProdus called 0 returned 0% blocks executed 0%
    #####:   17:void uiAdaugaProdus(Service *service) {
        -:   18:    Product product;
        -:   19:
    #####:   20:    product.id = 0;
        -:   21:
    #####:   22:    printf("Enter the type of the product: ");
    %%%%%:   22-block  0
call    0 never executed
    #####:   23:    if (scanf("%49s", product.type) != 1) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:   24:        fprintf(stderr, "Error: Failed to read type\n");
    %%%%%:   24-block  0
call    0 never executed
call    1 never executed
    #####:   25:        return;
    %%%%%:   25-block  0
        -:   26:    }
        -:   27:
    #####:   28:    printf("Enter the producer of the product: ");
    %%%%%:   28-block  0
call    0 never executed
    #####:   29:    if (scanf("%49s", product.producer) != 1) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:   30:        fprintf(stderr, "Error: Failed to read producer\n");
    %%%%%:   30-block  0
call    0 never executed
call    1 never executed
    #####:   31:        return;
        -:   32:    }
        -:   33:
    #####:   34:    printf("Enter the model of the product: ");
    %%%%%:   34-block  0
call    0 never executed
    #####:   35:    if (scanf("%49s", product.model) != 1) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:   36:        fprintf(stderr, "Error: Failed to read model\n");
    %%%%%:   36-block  0
call    0 never executed
call    1 never executed
    #####:   37:        return;
        -:   38:    }
        -:   39:
    #####:   40:    printf("Enter the price of the product: ");
    %%%%%:   40-block  0
call    0 never executed
    #####:   41:    if (scanf("%d", &product.price) != 1) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:   42:        fprintf(stderr, "Error: Invalid price\n");
    %%%%%:   42-block  0
call    0 never executed
call    1 never executed
    #####:   43:        return;
        -:   44:    }
        -:   45:
    #####:   46:    printf("Enter the quantity of the product: ");
    %%%%%:   46-block  0
call    0 never executed
    #####:   47:    if (scanf("%d", &product.quantity) != 1) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:   48:        fprintf(stderr, "Error: Invalid quantity\n");
    %%%%%:   48-block  0
call    0 never executed
call    1 never executed
    #####:   49:        return;
        -:   50:    }
        -:   51:
        -:   52:    // Call the addProduct function to add the product to the service
    #####:   53:    addProduct(service, product);
    %%%%%:   53-block  0
call    0 never executed
        -:   54:}
        -:   55:
function uiActualizareProdus called 0 returned 0% blocks executed 0%
    #####:   56:void uiActualizareProdus(Service *service) {
        -:   57:    char* option;
    #####:   58:    option = malloc(100 * sizeof (char));
        -:   59:
    #####:   60:    printf("Alegeti id ul produsului pe care vreti sa il actualizati: ");
    %%%%%:   60-block  0
call    0 never executed
    #####:   61:    scanf("%s", option);
call    0 never executed
    #####:   62:    int num = atoi(option);
call    0 never executed
    #####:   63:    int id = num;
    #####:   64:    Product finded =  find(*service->repository, num);
call    0 never executed
    #####:   65:    if (finded.id == -1) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   66:        printf("Produsul nu a fost gasit\n");
    %%%%%:   66-block  0
call    0 never executed
        -:   67:    } else {
    #####:   68:        printf("Alegeti dupa ce actualizati produsul\n1. Doar dupa pret\n2. Doar dupa cantitate\n3. Dupa pret si cantitate\nOptiune: ");
    %%%%%:   68-block  0
call    0 never executed
    #####:   69:        scanf("%s", option);
call    0 never executed
    #####:   70:        printf("\n");
call    0 never executed
        -:   71:
    #####:   72:        num = atoi(option);
call    0 never executed
        -:   73:
    #####:   74:        if (num == 1) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   75:            int newPrice = 0;
    #####:   76:            printf("Introduceti pretul cu care modificati: ");
    %%%%%:   76-block  0
call    0 never executed
    #####:   77:            scanf("%d", &newPrice);
call    0 never executed
    #####:   78:            updatePriceForProduct(service, id, newPrice);
call    0 never executed
    #####:   79:        } else if (num == 2) {
    %%%%%:   79-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   80:            int newQuantity = 0;
    #####:   81:            printf("Introduceti cantitatea cu care modificati: ");
    %%%%%:   81-block  0
call    0 never executed
    #####:   82:            scanf("%d", &newQuantity);
call    0 never executed
    #####:   83:            updateQuantityForProduct(service, id, newQuantity);
call    0 never executed
    #####:   84:        } else if (num == 3) {
    %%%%%:   84-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   85:            int newPrice = 0;
    #####:   86:            printf("Introduceti pretul cu care modificati: ");
    %%%%%:   86-block  0
call    0 never executed
    #####:   87:            scanf("%d", &newPrice);
call    0 never executed
    #####:   88:            printf("\n");
call    0 never executed
    #####:   89:            int newQuantity = 0;
    #####:   90:            printf("Introduceti cantitatea cu care modificati: ");
call    0 never executed
    #####:   91:            scanf("%d", &newQuantity);
call    0 never executed
        -:   92:
    #####:   93:            updatePriceForProduct(service, id, newPrice);
call    0 never executed
    #####:   94:            updateQuantityForProduct(service, id, newQuantity);
call    0 never executed
        -:   95:        } else {
    #####:   96:            printf("Optiune invalida");
    %%%%%:   96-block  0
call    0 never executed
        -:   97:        }
        -:   98:    }
        -:   99:
    #####:  100:}
        -:  101:
function uiStergereProdus called 0 returned 0% blocks executed 0%
    #####:  102:void uiStergereProdus(Service *service) {
        -:  103:    int id;
        -:  104:
    #####:  105:    char* option = malloc(100 * sizeof (char *));
        -:  106:
    #####:  107:    printf("Introduceti id-ul produsului pe car vreti sa l stergeti: ");
    %%%%%:  107-block  0
call    0 never executed
    #####:  108:    scanf("%s", option);
call    0 never executed
        -:  109:
    #####:  110:    id = atoi(option);
call    0 never executed
    #####:  111:    Product finded = find(*service->repository, id);
call    0 never executed
        -:  112:
    #####:  113:    if (finded.id == -1) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  114:        printf("Produsul nu a fost gasit");
    %%%%%:  114-block  0
call    0 never executed
        -:  115:    } else {
    #####:  116:        deleteProduct(service, id);
    %%%%%:  116-block  0
call    0 never executed
        -:  117:    }
        -:  118:
    #####:  119:    free(option);
        -:  120:
    #####:  121:}
        -:  122:
function uiVizualizareProduse called 0 returned 0% blocks executed 0%
    #####:  123:void uiVizualizareProduse(Service *service) {
        -:  124:    int option;
        -:  125:
    #####:  126:    printf("Alegeti tipul de sortare (1 : crescator/2 : descrescator): ");
    %%%%%:  126-block  0
call    0 never executed
    #####:  127:    scanf("%d", &option);
call    0 never executed
        -:  128:
    #####:  129:    Product *sortedProducts = sortProducts(*service, option);
call    0 never executed
    #####:  130:    if (sortedProducts == NULL) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  131:        printf("There are no products in the service.\n");
    %%%%%:  131-block  0
call    0 never executed
    #####:  132:        return;
        -:  133:    }
        -:  134:
    #####:  135:    printf("List of products:\n");
    %%%%%:  135-block  0
call    0 never executed
        -:  136:
    #####:  137:    for (int i = 0; i < service->repository->count; i++) {
    %%%%%:  137-block  0
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  138:        printf("ID: %d, Type: %s, Producer: %s, Model: %s, Price: %d, Quantity: %d\n",
    #####:  139:        sortedProducts[i].id, sortedProducts[i].type, sortedProducts[i].producer, sortedProducts[i].model,
    #####:  140:        sortedProducts[i].price, sortedProducts[i].quantity);
    %%%%%:  140-block  0
call    0 never executed
        -:  141:    }
        -:  142:
    #####:  143:    free(sortedProducts);
    %%%%%:  143-block  0
        -:  144:
        -:  145:}
        -:  146:
function uiListaProduseFiltrate called 0 returned 0% blocks executed 0%
    #####:  147:void uiListaProduseFiltrate(Service *service){
        -:  148:    Product *filteredProducts;
        -:  149:
    #####:  150:    printf("Alegeti criteriul dupa care se filtreaza:\n1. Pret\n2. Cantitate\n3. Producator\nOptiune: ");
    %%%%%:  150-block  0
call    0 never executed
        -:  151:    int num;
    #####:  152:    scanf("%d", &num);
call    0 never executed
        -:  153:
    #####:  154:    int filteredSize = 0;
    #####:  155:    if (num == 1) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  156:        printf("Introduceti pretul dupa care filtrati: ");
    %%%%%:  156-block  0
call    0 never executed
    #####:  157:        int price = 0;
    #####:  158:        scanf("%d", &price);
call    0 never executed
    #####:  159:        filteredProducts = filterProducts(*service, "price", price, &filteredSize, "");
call    0 never executed
    #####:  160:    } else if (num == 2) {
    %%%%%:  160-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  161:        printf("Introduceti cantitatea dupa care filtrati: ");
    %%%%%:  161-block  0
call    0 never executed
    #####:  162:        int quantity = 0;
    #####:  163:        scanf("%d", &quantity);
call    0 never executed
    #####:  164:        filteredProducts = filterProducts(*service, "quantity", quantity, &filteredSize, "");
call    0 never executed
        -:  165:    } else {
    #####:  166:        printf("Introduceti producatorul dupa care filtrati: ");
    %%%%%:  166-block  0
call    0 never executed
    #####:  167:        char *producer = NULL;
    #####:  168:        producer = malloc(BUFFER_SIZE * sizeof (char));
    #####:  169:        scanf("%s", producer);
call    0 never executed
    #####:  170:        filteredProducts = filterProducts(*service, "producer", 0, &filteredSize, producer);
call    0 never executed
    #####:  171:        free(producer);
        -:  172:    }
        -:  173:
    #####:  174:    for (int i = 0; i < filteredSize; i++) {
    %%%%%:  174-block  0
    %%%%%:  174-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  175:        printf("ID: %d, Type: %s, Producer: %s, Model: %s, Price: %d, Quantity: %d\n",
    #####:  176:               filteredProducts[i].id, filteredProducts[i].type, filteredProducts[i].producer, filteredProducts[i].model,
    #####:  177:               filteredProducts[i].price, filteredProducts[i].quantity);
    %%%%%:  177-block  0
call    0 never executed
        -:  178:    }
    #####:  179:}
        -:  180:
function undoUI called 0 returned 0% blocks executed 0%
    #####:  181:void undoUI(Service *service) {
    #####:  182:    int result = undo(service);
    %%%%%:  182-block  0
call    0 never executed
    #####:  183:    if (result == 0) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  184:        printf("Nu se poate face undo\n");
    %%%%%:  184-block  0
call    0 never executed
        -:  185:    } else {
    #####:  186:        printf("Undo efectuat cu succes\n");
    %%%%%:  186-block  0
call    0 never executed
        -:  187:    }
    #####:  188:}
        -:  189:
function run called 1 returned 0% blocks executed 18%
        1:  190:void run(Console ui) {
        -:  191:
        -:  192:    char choice[50];
        -:  193:    int num;
        -:  194:    do {
        1:  195:        showMenu();
        1:  195-block  0
call    0 returned 1
        1:  196:        printf("Alege o optiune: ");
call    0 returned 1
        1:  197:        scanf("%s", &choice);
call    0 returned 0
    #####:  198:        char *endptr = NULL;
    #####:  199:        num = strtol(&choice, &endptr, 10);
call    0 never executed
        -:  200:
    #####:  201:        switch (num) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  202:            case 1:
    #####:  203:                uiAdaugaProdus(ui.service);
    %%%%%:  203-block  0
call    0 never executed
    #####:  204:                break;
    #####:  205:            case 2:
    #####:  206:                uiActualizareProdus(ui.service);
    %%%%%:  206-block  0
call    0 never executed
    #####:  207:                break;
    #####:  208:            case 3:
    #####:  209:                uiStergereProdus(ui.service);
    %%%%%:  209-block  0
call    0 never executed
    #####:  210:                break;
    #####:  211:            case 4:
    #####:  212:                uiVizualizareProduse(ui.service);
    %%%%%:  212-block  0
call    0 never executed
    #####:  213:                break;
    #####:  214:            case 5:
    #####:  215:                uiListaProduseFiltrate(ui.service);
    %%%%%:  215-block  0
call    0 never executed
    #####:  216:                break;
    #####:  217:            case 6:
    #####:  218:                break;
    %%%%%:  218-block  0
    #####:  219:            case 7:
    #####:  220:                undoUI(ui.service);
    %%%%%:  220-block  0
call    0 never executed
    #####:  221:                break;
    #####:  222:            case 8:
    #####:  223:                printf("Optiune invalida\n");
    %%%%%:  223-block  0
call    0 never executed
    #####:  224:                break;
        -:  225:        }
    #####:  226:    } while (num != 6);
    %%%%%:  226-block  0
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  227:}
        -:  228:
