        -:    0:Source:/mnt/d/FMI UBB CLUJ 2023-2026/UBB-COMPUTER-SCIENCE/SEMESTRUL 2/STRUCTURI DE DATE SI ALGORITMI/LABORATOR/L1/TestExtins.cpp
        -:    0:Graph:/mnt/d/FMI UBB CLUJ 2023-2026/UBB-COMPUTER-SCIENCE/SEMESTRUL 2/STRUCTURI DE DATE SI ALGORITMI/LABORATOR/L1/cmake-build-debug-coverage/CMakeFiles/L1.dir/TestExtins.cpp.gcno
        -:    0:Data:/mnt/d/FMI UBB CLUJ 2023-2026/UBB-COMPUTER-SCIENCE/SEMESTRUL 2/STRUCTURI DE DATE SI ALGORITMI/LABORATOR/L1/cmake-build-debug-coverage/CMakeFiles/L1.dir/TestExtins.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by Costi on 24-Mar-24.
        -:    3://
        -:    4:
        -:    5:#include "TestExtins.h"
        -:    6:#include "Multime.h"
        -:    7:#include "IteratorMultime.h"
        -:    8:#include <assert.h>
        -:    9:
function _Z11testCreeazav called 1 returned 100% blocks executed 75%
        1:   10:void testCreeaza() {
        1:   11:    Multime m;
        1:   11-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   12:    assert(m.dim() == 0);
        1:   12-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   12-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   12-block  2
call    5 never executed
       1*:   13:    assert(m.vida() == true);
        1:   13-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   13-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   13-block  2
call    5 never executed
        -:   14:
       21:   15:    for (int i = -10; i < 10; i++) { //cautam in multimea vida
        1:   15-block  0
       20:   15-block  1
       21:   15-block  2
branch  0 taken 20
branch  1 taken 1 (fallthrough)
      20*:   16:        assert(m.cauta(i) == false);
       20:   16-block  0
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
       20:   16-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 20
    %%%%%:   16-block  2
call    5 never executed
        -:   17:    }
       21:   18:    for (int i = -10; i < 10; i++) { //stergem din multimea vida
        1:   18-block  0
       20:   18-block  1
       21:   18-block  2
branch  0 taken 20
branch  1 taken 1 (fallthrough)
      20*:   19:        assert(m.sterge(i) == false);
       20:   19-block  0
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
       20:   19-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 20
    %%%%%:   19-block  2
call    5 never executed
        -:   20:    }
        -:   21:
        1:   22:    IteratorMultime im = m.iterator(); //iterator pe multimea vida ar trebui sa fie invalid din start
        1:   22-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   23:    assert(im.valid() == false);
        1:   23-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   23-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   23-block  2
call    5 never executed
        1:   24:}
        1:   24-block  0
call    0 returned 1
    $$$$$:   24-block  1
call    1 never executed
        -:   25:
        -:   26:
function _Z10testAdaugav called 0 returned 0% blocks executed 0%
    #####:   27:void testAdauga() {
        -:   28:    int vverif[10];
        -:   29:    int iverif;
        -:   30:
    #####:   31:    Multime m2;
    %%%%%:   31-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   32:    for (int i = 0; i <= 3; i++) {
    %%%%%:   32-block  0
    %%%%%:   32-block  1
    %%%%%:   32-block  2
branch  0 never executed
branch  1 never executed
    #####:   33:        m2.adauga(i);
    %%%%%:   33-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   34:    }
    #####:   35:    for (int i = 5; i > 3; i--) {
    %%%%%:   35-block  0
    %%%%%:   35-block  1
    %%%%%:   35-block  2
branch  0 never executed
branch  1 never executed
    #####:   36:        m2.adauga(i);
    %%%%%:   36-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   37:    }
        -:   38:    // verificam ordinea de extragere
    #####:   39:    IteratorMultime im2 = m2.iterator();
    %%%%%:   39-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   40:    iverif = 0;
    #####:   41:    while (im2.valid()){
    %%%%%:   41-block  0
    %%%%%:   41-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   41-block  2
branch  3 never executed
branch  4 never executed
    #####:   42:        vverif[iverif++]=im2.element();
    %%%%%:   42-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   43:        im2.urmator();
    %%%%%:   43-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   44:    }
    #####:   45:    assert((vverif[5]==5) &&(vverif[4]==4)&&(vverif[3]==3)&&(vverif[2]==2) &&(vverif[1]==1)&&(vverif[0]==0));
    %%%%%:   45-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   45-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:   45-block  2
branch  4 never executed
branch  5 never executed
    %%%%%:   45-block  3
branch  6 never executed
branch  7 never executed
    %%%%%:   45-block  4
branch  8 never executed
branch  9 never executed
    %%%%%:   45-block  5
branch 10 never executed
branch 11 never executed
    %%%%%:   45-block  6
call   12 never executed
    #####:   46:    assert(m2.vida() == false);
    %%%%%:   46-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   46-block  1
branch  3 never executed
branch  4 never executed
    %%%%%:   46-block  2
call    5 never executed
    #####:   47:    assert(m2.dim() == 6);
    %%%%%:   47-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   47-block  1
branch  3 never executed
branch  4 never executed
    %%%%%:   47-block  2
call    5 never executed
        -:   48:
    #####:   49:    Multime m;
    %%%%%:   49-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   50:    for (int i = 0; i <= 3; i++) {
    %%%%%:   50-block  0
    %%%%%:   50-block  1
    %%%%%:   50-block  2
branch  0 never executed
branch  1 never executed
    #####:   51:        m.adauga(i);
    %%%%%:   51-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   52:    }
    #####:   53:    for (int i = 5; i > 3; i--) {
    %%%%%:   53-block  0
    %%%%%:   53-block  1
    %%%%%:   53-block  2
branch  0 never executed
branch  1 never executed
    #####:   54:        m.adauga(i);
    %%%%%:   54-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   55:    }
        -:   56:    // verificam ordinea de extragere
    #####:   57:    IteratorMultime im = m.iterator();
    %%%%%:   57-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   58:    iverif = 0;
    #####:   59:    while (im.valid()){
    %%%%%:   59-block  0
    %%%%%:   59-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   59-block  2
branch  3 never executed
branch  4 never executed
    #####:   60:        vverif[iverif++]=im.element();
    %%%%%:   60-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   61:        im.urmator();
    %%%%%:   61-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   62:    }
    #####:   63:    assert((vverif[0]==0) &&(vverif[1]==1)&&(vverif[2]==2)&&(vverif[3]==3) &&(vverif[4]==4)&&(vverif[5]==5));
    %%%%%:   63-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   63-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:   63-block  2
branch  4 never executed
branch  5 never executed
    %%%%%:   63-block  3
branch  6 never executed
branch  7 never executed
    %%%%%:   63-block  4
branch  8 never executed
branch  9 never executed
    %%%%%:   63-block  5
branch 10 never executed
branch 11 never executed
    %%%%%:   63-block  6
call   12 never executed
    #####:   64:    assert(m.vida() == false);
    %%%%%:   64-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   64-block  1
branch  3 never executed
branch  4 never executed
    %%%%%:   64-block  2
call    5 never executed
    #####:   65:    assert(m.dim() == 6);
    %%%%%:   65-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   65-block  1
branch  3 never executed
branch  4 never executed
    %%%%%:   65-block  2
call    5 never executed
        -:   66:
    #####:   67:    for (int i = -10; i < 20; i++) { //mai adaugam elemente [-10, 20)
    %%%%%:   67-block  0
    %%%%%:   67-block  1
    %%%%%:   67-block  2
branch  0 never executed
branch  1 never executed
    #####:   68:        m.adauga(i);
    %%%%%:   68-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   69:    }
    #####:   70:    assert(m.vida() == false);
    %%%%%:   70-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   70-block  1
branch  3 never executed
branch  4 never executed
    %%%%%:   70-block  2
call    5 never executed
    #####:   71:    assert(m.dim() == 30);
    %%%%%:   71-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   71-block  1
branch  3 never executed
branch  4 never executed
    %%%%%:   71-block  2
call    5 never executed
    #####:   72:    for (int i = 100; i > -100; i--) { //mai adaugam elemente (-100, 100]
    %%%%%:   72-block  0
    %%%%%:   72-block  1
    %%%%%:   72-block  2
branch  0 never executed
branch  1 never executed
    #####:   73:        m.adauga(i);
    %%%%%:   73-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   74:    }
    #####:   75:    assert(m.vida() == false);
    %%%%%:   75-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   75-block  1
branch  3 never executed
branch  4 never executed
    %%%%%:   75-block  2
call    5 never executed
    #####:   76:    assert(m.dim() == 200);
    %%%%%:   76-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   76-block  1
branch  3 never executed
branch  4 never executed
    %%%%%:   76-block  2
call    5 never executed
    #####:   77:    for (int i = -200; i < 200; i++) {
    %%%%%:   77-block  0
    %%%%%:   77-block  1
    %%%%%:   77-block  2
branch  0 never executed
branch  1 never executed
    #####:   78:        if (i <= -100) {
    %%%%%:   78-block  0
branch  0 never executed
branch  1 never executed
    #####:   79:            assert(m.cauta(i) == false);
    %%%%%:   79-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   79-block  1
branch  3 never executed
branch  4 never executed
    %%%%%:   79-block  2
call    5 never executed
        -:   80:        }
    #####:   81:        else if (i < 0) {
    %%%%%:   81-block  0
branch  0 never executed
branch  1 never executed
    #####:   82:            assert(m.cauta(i) == true);
    %%%%%:   82-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   82-block  1
branch  3 never executed
branch  4 never executed
    %%%%%:   82-block  2
call    5 never executed
        -:   83:        }
    #####:   84:        else if (i <= 100) {
    %%%%%:   84-block  0
branch  0 never executed
branch  1 never executed
    #####:   85:            assert(m.cauta(i) == true);
    %%%%%:   85-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   85-block  1
branch  3 never executed
branch  4 never executed
    %%%%%:   85-block  2
call    5 never executed
        -:   86:        }
        -:   87:        else {
    #####:   88:            assert(m.cauta(i) == false);
    %%%%%:   88-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   88-block  1
branch  3 never executed
branch  4 never executed
    %%%%%:   88-block  2
call    5 never executed
        -:   89:        }
        -:   90:    }
    #####:   91:    for (int i = 10000; i > -10000; i--) { //adaugam mult, si acum prima data adaugam valori mari, dupa aceea mici
    %%%%%:   91-block  0
    %%%%%:   91-block  1
    %%%%%:   91-block  2
branch  0 never executed
branch  1 never executed
    #####:   92:        m.adauga(i);
    %%%%%:   92-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   93:    }
    #####:   94:    assert(m.dim()==20000);
    %%%%%:   94-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   94-block  1
branch  3 never executed
branch  4 never executed
    %%%%%:   94-block  2
call    5 never executed
    #####:   95:}
    %%%%%:   95-block  0
call    0 never executed
call    1 never executed
    $$$$$:   95-block  1
call    2 never executed
    $$$$$:   95-block  2
call    3 never executed
        -:   96:
        -:   97:
function _Z10testStergev called 1 returned 100% blocks executed 80%
        1:   98:void testSterge() {
        1:   99:    Multime m;
        1:   99-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
      201:  100:    for (int i = -100; i < 100; i++) { //stergem din multimea vida
        1:  100-block  0
      200:  100-block  1
      201:  100-block  2
branch  0 taken 200
branch  1 taken 1 (fallthrough)
     200*:  101:        assert(m.sterge(i) == false);
      200:  101-block  0
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
      200:  101-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 200
    %%%%%:  101-block  2
call    5 never executed
        -:  102:    }
       1*:  103:    assert(m.dim() == 0);
        1:  103-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  103-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  103-block  2
call    5 never executed
        -:  104:
      101:  105:    for (int i = -100; i < 100; i = i + 2) { //adaugam elemente din 2 in 2 (numere pare)
        1:  105-block  0
      100:  105-block  1
      101:  105-block  2
branch  0 taken 100
branch  1 taken 1 (fallthrough)
      100:  106:        m.adauga(i);
      100:  106-block  0
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
        -:  107:    }
      201:  108:    for (int i = -100; i < 100; i++) { //stergem tot (inclusiv elemente inexistente)
        1:  108-block  0
      200:  108-block  1
      201:  108-block  2
branch  0 taken 200
branch  1 taken 1 (fallthrough)
      200:  109:        if (i % 2 == 0) {
      200:  109-block  0
branch  0 taken 100 (fallthrough)
branch  1 taken 100
     100*:  110:            assert(m.sterge(i) == true);
      100:  110-block  0
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
      100:  110-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 100
    %%%%%:  110-block  2
call    5 never executed
        -:  111:        }
        -:  112:        else {
     100*:  113:            assert(m.sterge(i) == false);
      100:  113-block  0
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
      100:  113-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 100
    %%%%%:  113-block  2
call    5 never executed
        -:  114:        }
        -:  115:    }
       1*:  116:    assert(m.dim() == 0);
        1:  116-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  116-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  116-block  2
call    5 never executed
        -:  117:
      102:  118:    for (int i = -100; i <= 100; i = i + 2) { //adaugam elemente din 2 in 2
        1:  118-block  0
      101:  118-block  1
      102:  118-block  2
branch  0 taken 101
branch  1 taken 1 (fallthrough)
      101:  119:        m.adauga(i);
      101:  119-block  0
call    0 returned 101
branch  1 taken 101 (fallthrough)
branch  2 taken 0 (throw)
        -:  120:    }
        -:  121:
      201:  122:    for (int i = 100; i > -100; i--) { //stergem descrescator (in ordine inversa fata de ordinea adaugarii)
        1:  122-block  0
      200:  122-block  1
      201:  122-block  2
branch  0 taken 200
branch  1 taken 1 (fallthrough)
      200:  123:        if (i % 2 == 0) {
      200:  123-block  0
branch  0 taken 100 (fallthrough)
branch  1 taken 100
     100*:  124:            assert(m.sterge(i) == true);
      100:  124-block  0
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
      100:  124-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 100
    %%%%%:  124-block  2
call    5 never executed
        -:  125:        }
        -:  126:        else {
     100*:  127:            assert(m.sterge(i) == false);
      100:  127-block  0
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
      100:  127-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 100
    %%%%%:  127-block  2
call    5 never executed
        -:  128:        }
        -:  129:    }
       1*:  130:    assert(m.dim() == 1);
        1:  130-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  130-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  130-block  2
call    5 never executed
        -:  131:
        1:  132:    m.sterge(-100);
        1:  132-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  133:    assert(m.dim() == 0);
        1:  133-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  133-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  133-block  2
call    5 never executed
        -:  134:
      201:  135:    for (int i = -100; i < 100; i++) { //adaugam de 5 ori pe fiecare element
        1:  135-block  0
      200:  135-block  1
      201:  135-block  2
branch  0 taken 200
branch  1 taken 1 (fallthrough)
      200:  136:        m.adauga(i);
      200:  136-block  0
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
      200:  137:        m.adauga(i);
      200:  137-block  0
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
      200:  138:        m.adauga(i);
      200:  138-block  0
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
      200:  139:        m.adauga(i);
      200:  139-block  0
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
      200:  140:        m.adauga(i);
      200:  140-block  0
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
        -:  141:    }
        -:  142:
       1*:  143:    assert(m.dim() == 200);
        1:  143-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  143-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  143-block  2
call    5 never executed
      401:  144:    for (int i = -200; i < 200; i++) { //stergem elemente inexistente si existente
        1:  144-block  0
      400:  144-block  1
      401:  144-block  2
branch  0 taken 400
branch  1 taken 1 (fallthrough)
      400:  145:        if (i < -100 || i >= 100) {
      400:  145-block  0
branch  0 taken 300 (fallthrough)
branch  1 taken 100
      300:  145-block  1
branch  2 taken 100 (fallthrough)
branch  3 taken 200
     200*:  146:            assert(m.sterge(i) == false);
      200:  146-block  0
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
      200:  146-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 200
    %%%%%:  146-block  2
call    5 never executed
        -:  147:        }
        -:  148:        else {
     200*:  149:            assert(m.sterge(i) == true);
      200:  149-block  0
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
      200:  149-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 200
    %%%%%:  149-block  2
call    5 never executed
     200*:  150:            assert(m.sterge(i) == false);
      200:  150-block  0
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
      200:  150-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 200
    %%%%%:  150-block  2
call    5 never executed
        -:  151:        }
        -:  152:    }
       1*:  153:    assert(m.dim() == 0);
        1:  153-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  153-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  153-block  2
call    5 never executed
        -:  154:
        1:  155:}
        1:  155-block  0
call    0 returned 1
    $$$$$:  155-block  1
call    1 never executed
        -:  156:
        -:  157:
function _Z12testIteratorv called 1 returned 100% blocks executed 77%
        1:  158:void testIterator() {
        1:  159:    Multime m;
        1:  159-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  160:    IteratorMultime im = m.iterator(); //iterator pe multime vida
        1:  160-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  161:    assert(im.valid() == false);
        1:  161-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  161-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  161-block  2
call    5 never executed
        -:  162:
      101:  163:    for (int i = 0; i < 100; i++) {  //adaug de 100 de ori valoarea 33
        1:  163-block  0
      100:  163-block  1
      101:  163-block  2
branch  0 taken 100
branch  1 taken 1 (fallthrough)
      100:  164:        m.adauga(33);
      100:  164-block  0
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
        -:  165:    }
       1*:  166:    assert(m.dim()==1);
        1:  166-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  166-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  166-block  2
call    5 never executed
        -:  167:
        1:  168:    IteratorMultime im2 = m.iterator(); //daca iterez, doar 33 poate sa-mi dea iteratorul
        1:  168-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  169:    assert(im2.valid() == true);
        1:  169-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  169-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  169-block  2
call    5 never executed
        1:  170:    TElem elem = im2.element();
        1:  170-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  171:    assert(elem == 33);
        1:  171-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  171-block  1
call    2 never executed
        1:  172:    im2.urmator();
        1:  172-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  173:    assert(im2.valid() == false);
        1:  173-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  173-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  173-block  2
call    5 never executed
        -:  174:
        1:  175:    im2.prim(); //resetam pe primul elemente
        1:  175-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  176:    assert(im2.valid() == true);
        1:  176-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  176-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  176-block  2
call    5 never executed
        -:  177:
        1:  178:    Multime m2;
        1:  178-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
      201:  179:    for (int i = -100; i < 100; i++) { //adaug 200 de elemente, fiecare de 3 ori
        1:  179-block  0
      200:  179-block  1
      201:  179-block  2
branch  0 taken 200
branch  1 taken 1 (fallthrough)
      200:  180:        m2.adauga(i);
      200:  180-block  0
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
      200:  181:        m2.adauga(i);
      200:  181-block  0
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
      200:  182:        m2.adauga(i);
      200:  182-block  0
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
        -:  183:    }
        -:  184:
        1:  185:    IteratorMultime im3 = m2.iterator();
        1:  185-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  186:    assert(im3.valid() == true);
        1:  186-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  186-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  186-block  2
call    5 never executed
      201:  187:    for (int i = 0; i < 200; i++) {
        1:  187-block  0
      200:  187-block  1
      201:  187-block  2
branch  0 taken 200
branch  1 taken 1 (fallthrough)
        -:  188:        //TElem e1 = im3.element();
      200:  189:        im3.urmator();
      200:  189-block  0
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
        -:  190:    }
       1*:  191:    assert(im3.valid() == false);
        1:  191-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  191-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  191-block  2
call    5 never executed
        1:  192:    im3.prim();
        1:  192-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  193:    assert(im3.valid() == true);
        1:  193-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  193-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  193-block  2
call    5 never executed
        -:  194:
        1:  195:    Multime m3;
        1:  195-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       51:  196:    for (int i = 0; i < 200; i= i + 4) { //adaugam doar multipli de 4
        1:  196-block  0
       50:  196-block  1
       51:  196-block  2
branch  0 taken 50
branch  1 taken 1 (fallthrough)
       50:  197:        m3.adauga(i);
       50:  197-block  0
call    0 returned 50
branch  1 taken 50 (fallthrough)
branch  2 taken 0 (throw)
        -:  198:    }
        -:  199:
        1:  200:    IteratorMultime im4 = m3.iterator();
        1:  200-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  201:    assert(im4.valid() == true);
        1:  201-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  201-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  201-block  2
call    5 never executed
        1:  202:    int count = 0;
       51:  203:    while (im4.valid()) { //fiecare element e multiplu de 4 si sunt in total 50 de elemente
        1:  203-block  0
       51:  203-block  1
call    0 returned 51
branch  1 taken 51 (fallthrough)
branch  2 taken 0 (throw)
       51:  203-block  2
branch  3 taken 50
branch  4 taken 1 (fallthrough)
       50:  204:        TElem e = im4.element();
       50:  204-block  0
call    0 returned 50
branch  1 taken 50 (fallthrough)
branch  2 taken 0 (throw)
      50*:  205:        assert(e % 4 == 0);
       50:  205-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 50
    %%%%%:  205-block  1
call    2 never executed
       50:  206:        im4.urmator();
       50:  206-block  0
call    0 returned 50
branch  1 taken 50 (fallthrough)
branch  2 taken 0 (throw)
       50:  207:        count++;
       50:  207-block  0
        -:  208:    }
       1*:  209:    assert(count == 50);
        1:  209-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  209-block  1
call    2 never executed
        1:  210:}
        1:  210-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
    $$$$$:  210-block  1
call    3 never executed
    $$$$$:  210-block  2
call    4 never executed
    $$$$$:  210-block  3
call    5 never executed
        -:  211:
        -:  212:
        -:  213:
function _Z12testQuantityv called 0 returned 0% blocks executed 0%
    #####:  214:void testQuantity() {//scopul e sa adaugam multe date
    #####:  215:    Multime m;
    %%%%%:  215-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  216:    for (int i = 10; i >= 1; i--) {
    %%%%%:  216-block  0
    %%%%%:  216-block  1
    %%%%%:  216-block  2
branch  0 never executed
branch  1 never executed
    #####:  217:        for (int j = -30000; j < 30000; j = j + i) {
    %%%%%:  217-block  0
    %%%%%:  217-block  1
    %%%%%:  217-block  2
branch  0 never executed
branch  1 never executed
    #####:  218:            m.adauga(j);
    %%%%%:  218-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  219:        }
        -:  220:    }
    #####:  221:    assert(m.dim() == 60000);
    %%%%%:  221-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  221-block  1
branch  3 never executed
branch  4 never executed
    %%%%%:  221-block  2
call    5 never executed
    #####:  222:    IteratorMultime im = m.iterator();
    %%%%%:  222-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  223:    assert(im.valid() == true);
    %%%%%:  223-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  223-block  1
branch  3 never executed
branch  4 never executed
    %%%%%:  223-block  2
call    5 never executed
    #####:  224:    for (int i = 0; i < m.dim(); i++) {
    %%%%%:  224-block  0
    %%%%%:  224-block  1
    %%%%%:  224-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  224-block  3
branch  3 never executed
branch  4 never executed
    #####:  225:        im.urmator();
    %%%%%:  225-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  226:    }
    #####:  227:    im.prim();
    %%%%%:  227-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  228:    while (im.valid()) { //fiecare element returnat de iterator trebuie sa fie in multime
    %%%%%:  228-block  0
    %%%%%:  228-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  228-block  2
branch  3 never executed
branch  4 never executed
    #####:  229:        TElem e = im.element();
    %%%%%:  229-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  230:        assert(m.cauta(e) == true);
    %%%%%:  230-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  230-block  1
branch  3 never executed
branch  4 never executed
    %%%%%:  230-block  2
call    5 never executed
    #####:  231:        im.urmator();
    %%%%%:  231-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  232:    }
    #####:  233:    assert(im.valid() == false);
    %%%%%:  233-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  233-block  1
branch  3 never executed
branch  4 never executed
    %%%%%:  233-block  2
call    5 never executed
    #####:  234:    for (int i = 0; i < 10; i++) { //stergem multe elemente existente si inexistente
    %%%%%:  234-block  0
    %%%%%:  234-block  1
    %%%%%:  234-block  2
branch  0 never executed
branch  1 never executed
    #####:  235:        for (int j = 40000; j >= -40000; j--) {
    %%%%%:  235-block  0
    %%%%%:  235-block  1
    %%%%%:  235-block  2
branch  0 never executed
branch  1 never executed
    #####:  236:            m.sterge(j);
    %%%%%:  236-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  237:        }
        -:  238:    }
    #####:  239:    assert(m.dim() == 0);
    %%%%%:  239-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  239-block  1
branch  3 never executed
branch  4 never executed
    %%%%%:  239-block  2
call    5 never executed
    #####:  240:}
    %%%%%:  240-block  0
call    0 never executed
    $$$$$:  240-block  1
call    1 never executed
        -:  241:
        -:  242:
        -:  243:// nu stim reprezentarea multimii, putem testa doar anumite lucruri generale, nu stim in ce ordine vor fi afisate elementele.
function _Z13testAllExtinsv called 1 returned 100% blocks executed 100%
        1:  244:void testAllExtins() {
        -:  245:
        1:  246:    testCreeaza();
        1:  246-block  0
call    0 returned 1
        -:  247:    //testAdauga();
        1:  248:    testSterge();
call    0 returned 1
        1:  249:    testIterator();
call    0 returned 1
        -:  250:    //testQuantity();
        -:  251:
        1:  252:}
        -:  253:
        -:  254:
