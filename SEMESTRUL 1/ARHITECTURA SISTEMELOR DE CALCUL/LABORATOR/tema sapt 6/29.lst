     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                  ; ... 
    14                                      ; a = dword, b = dword
    15                                      ; c = qword
    16 00000000 69B969B9                    a DD 10111001011010011011100101101001b  ; a = B969B969h
    17 00000004 D369D369                    b DD 01101001110100110110100111010011b  ; b = 69D369D3h
    18 00000008 0000000000000000            cc DQ 0
    19                                  segment code use32 class=code
    20                                  start:
    21                                      ; se construieste c in edx:eax
    22 00000000 BA00000000                  mov edx, 0
    23 00000005 B800000000                  mov eax, 0
    24                                      
    25                                      ; bitii 56-63 ai lui C sunt bitii 24-31 ai rezultatului A XOR 0ABh
    26 0000000A 8B1D[00000000]              mov EBX, [a]               ; ebx = 1011100101101001 1011100101101001b
    27 00000010 C1EB18                      shr EBX, 24                ; ebx = 000000B9h
    28 00000013 80F3AB                      xor BL, 0ABh               ; bl = 12h    
    29 00000016 88DA                        mov DL, BL                 ; dl = 12h
    30                                      
    31                                      ; bitii 43-55 ai lui C sunt bitii 1-13 ai lui A
    32 00000018 8B1D[00000000]              mov EBX, [a]             
    33 0000001E D1EB                        shr EBX, 1
    34 00000020 81E3FF1F0000                and EBX, 00001FFFh
    35 00000026 C1E20D                      shl EDX, 13
    36 00000029 09DA                        or EDX, EBX    
    37                                      
    38                                      ; bitii 32-42 ai lui C sunt bitii 21-31 ai lui B
    39 0000002B 8B1D[04000000]              mov EBX, [b]
    40 00000031 C1EB15                      shr EBX, 21
    41 00000034 C1E20B                      shl EDX, 11
    42 00000037 09DA                        or EDX, EBX                ; e corect construit, l am facut pe hartie
    43                                      
    44                                      ; bitii 22-31 ai lui C au valoarea 0
    45                                      ; sunt deja, eax a fost initializat cu 0
    46                                      
    47                                      ; bitii 16-21 ai lui C sunt 101010
    48 00000039 C1E006                      shl EAX, 6
    49 0000003C 0C2A                        or AL, 00101010b           ; eax = 0000002Ah
    50                                      
    51                                      ; bitii 8-15 ai lui C sunt bitii 23-30 ai lui B complementati
    52 0000003E 8B1D[04000000]              mov EBX, [b]               ; ebx = 69D369D3h
    53 00000044 C1EB17                      shr EBX, 23                ; bl = D3h
    54 00000047 F7D3                        not EBX                    ; bl = 2Ch
    55 00000049 C1E008                      shl EAX, 8                 ; eax = 00002A00h
    56 0000004C 88D8                        mov AL, BL                 ; eax = 00002A2Ch
    57                                      
    58                                      ; bitii 0-7 ai lui C sunt bitii 21-28 ai lui A
    59 0000004E 8B1D[00000000]              mov EBX, [a]               ; ebx = B969B969h
    60 00000054 C1EB15                      shr EBX, 21                ; bl = 11001011b = CBh
    61 00000057 C1E008                      shl EAX, 8                 ; eax = 002A2C00h
    62 0000005A 88D8                        mov AL, BL                 ; eax = 002A2CCBh
    63                                      
    64                                      ; rezultatul se regaseste in edx:eax, se muta in variabila c
    65 0000005C 52                          push EDX
    66 0000005D 8F05[0C000000]              pop dword[cc + 4]
    67 00000063 50                          push EAX
    68 00000064 8F05[08000000]              pop dword[cc]
