     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 02                          a db 2
    15 00000001 01                          b db 1
    16 00000002 04                          c db 4
    17 00000003 03000000                    d dd 3
    18 00000007 0200000000000000            x dq 2
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23                                          ;14. x+(2-a*b)/(a*3)-a+c; cu semn
    24 00000000 B800000000                      mov eax, 0
    25 00000005 BB00000000                      mov ebx, 0
    26 0000000A B900000000                      mov ecx, 0
    27 0000000F BA00000000                      mov edx, 0
    28                                          
    29 00000014 A0[00000000]                     mov al, [a] ; al = a
    30 00000019 B400                             mov ah, 0
    31 0000001B 8A1D[01000000]                   mov bl, [b]
    32 00000021 B700                             mov bh, 0
    33 00000023 66F7EB                           imul bx ; a*b = 2*1 = 2
    34 00000026 6689C3                           mov bx, ax
    35 00000029 66B80200                         mov ax, 2
    36 0000002D 6629D8                           sub ax, bx ; (2-a*b) = 2-2 = 0
    37 00000030 50                               push eax
    38 00000031 A0[00000000]                     mov al, [a] ; ax = 2
    39 00000036 B303                             mov bl, 3   ; bx = 3 = (a*3)
    40 00000038 F6EB                             imul bl       ; ax = 6
    41 0000003A B400                             mov ah,0
    42 0000003C 6689C3                           mov bx, ax   ; bx = 6
    43 0000003F 58                               pop eax      ; ax = 0
    44 00000040 66F7FB                           idiv bx ; eax = 0 = (2-a*b)/(a*3)
    45 00000043 0305[07000000]                   add eax, [x] ; eax = x+(2-a*b)/(a*3) = 1
    46 00000049 89C3                             mov ebx, eax
    47 0000004B B800000000                       mov eax, 0
    48 00000050 A0[02000000]                     mov al, [c] ; al = 4 ; al = c
    49 00000055 2A05[00000000]                   sub al, [a] ; al = 4-2 = 2 ; al = c-a
    50 0000005B 6698                             cbw
    51 0000005D 98                               cwde
    52 0000005E 01D8                             add eax, ebx; eax = x+(2-a*b)/(a*3)-a+c = 3
    53                                          ; exit(0)
    54 00000060 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    55 00000062 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
