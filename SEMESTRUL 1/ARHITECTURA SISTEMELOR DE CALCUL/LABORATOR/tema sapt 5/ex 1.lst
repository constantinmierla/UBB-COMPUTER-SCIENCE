     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 01                          a db 1
    15 00000001 0200                        b dw 2
    16 00000003 08000000                    c dd 8
    17                                  ; our code starts here
    18                                  segment code use32 class=code
    19                                      start:
    20                                          ; ...
    21                                          ; ... 14. c-b-(a+a)-b cu semn
    22 00000000 B800000000                       mov eax, 0
    23 00000005 BB00000000                   mov ebx, 0
    24 0000000A B900000000                   mov ecx, 0
    25 0000000F BA00000000                   mov edx, 0
    26 00000014 A1[03000000]                    mov eax, [c]
    27 00000019 662B05[01000000]                sub ax, [b] ; eax = 8-2 = 6
    28                                  
    29                                      ; (a + a)
    30 00000020 8A1D[00000000]                  mov bl, [a] 
    31 00000026 021D[00000000]                  add bl, [a] ; al = 1 + 1 = 2
    32 0000002C 6698                            cbw 
    33                                          
    34                                      ; c - b - (a + a) - b
    35 0000002E 29D8                            sub eax, ebx
    36 00000030 19CA                            sbb edx, ecx
    37 00000032 2B05[01000000]                  sub eax, [b] ; 6 - 2 - 2 = 2
    38                                          ; exit(0)
    39 00000038 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    40 0000003A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
