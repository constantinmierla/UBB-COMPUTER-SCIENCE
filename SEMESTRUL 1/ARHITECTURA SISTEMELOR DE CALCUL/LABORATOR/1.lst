     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                  ;a - byte, b - word, c - double word, d - qword - Interpretare fara semn
    15                                  ;15. a+b-c+(d-a)
    16                                  ;30. (b+c+a)-(d+c+a)
    17 00000000 02                          a db 2
    18 00000001 0500                        b dw 5
    19 00000003 03000000                    c dd 3
    20 00000007 0300000000000000            d dq 3
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; ...
    25 00000000 B800000000                      mov EAX, 0
    26 00000005 A0[00000000]                    mov AL, [a]
    27 0000000A B400                            mov AH, 0
    28 0000000C 668B15[01000000]                mov DX, [b]
    29 00000013 6601D0                          ADD AX, DX ; a+b = 7
    30 00000016 BA00000000                      mov EDX, 0
    31 0000001B 8B15[03000000]                  mov EDX, [c] ; c
    32 00000021 29D0                            SUB EAX, EDX ; a+b-c = 4
    33 00000023 50                              push EAX
    34 00000024 B800000000                      mov EAX, 0
    35 00000029 A1[07000000]                    mov EAX, [d] 
    36 0000002E BB00000000                      mov EBX, 0
    37 00000033 8A1D[00000000]                  mov BL, [a]
    38 00000039 29D8                            sub EAX, EBX ; d-a = 1
    39 0000003B 89C3                            mov EBX, EAX
    40 0000003D B800000000                      mov EAX, 0
    41 00000042 58                              pop EAX ; a+b-c = 4
    42 00000043 01D8                            add EAX, EBX ; a+b-c+(d-a) = 4+1 = 5
    43                                          ; exit(0)
    44 00000045 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    45 00000047 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
