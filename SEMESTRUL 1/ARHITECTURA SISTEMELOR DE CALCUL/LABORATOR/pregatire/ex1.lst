     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  extern fopen,fprintf,fclose
    10                                  import fopen msvcrt.dll
    11                                  import fprintf msvcrt.dll
    12                                  import fclose msvcrt.dll
    13                                  
    14                                  segment data use32 class=data
    15                                      ; ...
    16 00000000 657831392E74787400          filename db "ex19.txt",0
    17 00000009 7700                        modacces db "w",0
    18 0000000B FFFFFFFF                    descriptor dd -1
    19 0000000F 313233343500                text db "12345",0
    20                                      len equ ($-text)
    21 00000015 00000000                    sum dd 0
    22 00000019 256400                      printformat db "%d",0
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; ...
    27                                          ;calculez suma
    28 00000000 BE[0F000000]                    mov esi, text
    29 00000005 B906000000                      mov ecx, len
    30 0000000A B800000000                      mov eax, 0
    31                                          calculeaza:
    32 0000000F AC                                  lodsb
    33 00000010 3C30                                cmp al,'0'
    34 00000012 720C                                jb nue
    35 00000014 3C39                                cmp al,'9'
    36 00000016 7708                                ja nue
    37 00000018 2C30                                sub al,48
    38 0000001A 0105[15000000]                      add dword [sum],eax
    39                                              nue:
    40 00000020 E2ED                                    loop calculeaza
    41                                                  
    42 00000022 68[09000000]                    push dword modacces
    43 00000027 68[00000000]                    push dword filename
    44 0000002C FF15[00000000]                  call [fopen]
    45 00000032 A3[0B000000]                    mov dword [descriptor],eax
    46 00000037 83C408                          add esp, 4*2
    47 0000003A FF35[15000000]                  push dword [sum]
    48 00000040 68[19000000]                    push dword printformat
    49 00000045 FF35[0B000000]                  push dword [descriptor]
    50                                          
    51                                          
    52 0000004B FF15[00000000]                  call [fprintf]
    53 00000051 83C40C                          add esp,4*3
    54                                          
    55 00000054 FF35[0B000000]                  push dword [descriptor]
    56 0000005A FF15[00000000]                  call [fclose]
    57 00000060 83C404                          add esp, 4
    58                                          ; exit(0)
    59 00000063 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    60 00000065 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
