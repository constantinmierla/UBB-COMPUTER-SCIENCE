     1                                  ; A file name and a text (defined in the data segment) are given.
     2                                  ; The text contains lowercase letters, digits and spaces.
     3                                  ; Replace all the digits on odd positions with the character ‘X’.
     4                                  ; Create the file with the given name and write the generated text to file.
     5                                  
     6                                  bits 32 ; assembling for the 32 bits architecture
     7                                  
     8                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     9                                  global start
    10                                  
    11                                  ; declare external functions needed by our program
    12                                  extern exit               ; tell nasm that exit exists even if we wont be defining it
    13                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    14                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    15                                  extern fopen, fprintf, fclose
    16                                  import fopen msvcrt.dll
    17                                  import fprintf msvcrt.dll
    18                                  import fclose msvcrt.dll
    19                                  
    20                                  ; our data is declared here (the variables needed by our program)
    21                                  segment data use32 class=data
    22 00000000 7700                      mode_access db 'w', 0
    23 00000002 32312E74787400            file_name db '21.txt', 0
    24 00000009 FFFFFFFF                  file_descriptor dd -1
    25                                  
    26 0000000D 323030325435356869-       string db '2002T55his is such a nice text wow 123'
    26 00000016 732069732073756368-
    26 0000001F 2061206E6963652074-
    26 00000028 65787420776F772031-
    26 00000031 3233               
    27                                    string_len equ ($ - string)
    28 00000033 00<rept>                  updated_string times (string_len + 1) db 0 ; (string_len + 1), because we want to reserve a byte also for the 0 (since we pass this string to a C function)
    29 0000005A 257300                    print_format db '%s', 0
    30                                  
    31                                  ; our code starts here
    32                                  segment code use32 class=code
    33                                    start:
    34                                      ; open the file
    35 00000000 68[00000000]                push dword mode_access
    36 00000005 68[02000000]                push dword file_name
    37 0000000A FF15[00000000]              call [fopen]
    38 00000010 83C408                      add esp, 4 * 2
    39                                  
    40                                      ; check if the file was opened correctly
    41 00000013 83F800                      cmp eax, 0
    42 00000016 745B                        je final
    43 00000018 A3[09000000]                mov [file_descriptor], eax
    44                                  
    45                                      ; iterate through the string
    46 0000001D BE[0D000000]                mov esi, string
    47 00000022 BF[33000000]                mov edi, updated_string
    48 00000027 B926000000                  mov ecx, string_len
    49 0000002C BB01000000                  mov ebx, 1 ; this is the human counter
    50                                  
    51                                      loop_string:
    52 00000031 AC                            lodsb ; al = the current character
    53 00000032 F7C301000000                  test ebx, 1 ; performs (ebx & 1) -> if we get a 1, the position is odd and the ZF = 0
    54 00000038 740A                          jz not_good_char
    55                                  
    56                                        ; otherwise, if the position is odd, we check if our character is a digit
    57 0000003A 3C30                          cmp al, '0'
    58 0000003C 7206                          jb not_good_char
    59 0000003E 3C39                          cmp al, '9'
    60 00000040 7702                          ja not_good_char
    61                                  
    62                                        ; if we reach this point, it means our character is on an odd position and it is a digit -> we update it with 'X'
    63 00000042 B058                          mov al, 'X'
    64                                  
    65                                        not_good_char:
    66 00000044 AA                            stosb ; store the possibly modified character into edi
    67                                  
    68 00000045 43                            inc ebx
    69                                  
    70 00000046 E2E9                          loop loop_string
    71                                  
    72                                        ; add the 0 end of string
    73 00000048 B000                          mov al, 0
    74 0000004A AA                            stosb
    75                                  
    76                                        ; print the updated_string
    77 0000004B 68[33000000]                  push dword updated_string
    78 00000050 68[5A000000]                  push dword print_format
    79 00000055 FF35[09000000]                push dword [file_descriptor]
    80 0000005B FF15[00000000]                call [fprintf]
    81 00000061 83C40C                        add esp, 4 * 3
    82                                  
    83                                        ; close the file
    84 00000064 FF35[09000000]                push dword [file_descriptor]
    85 0000006A FF15[00000000]                call [fclose]
    86 00000070 83C404                        add esp, 4
    87                                  
    88                                    final:
    89                                  	  ; exit(0)
    90 00000073 6A00                        push    dword 0      ; push the parameter for exit onto the stack
    91 00000075 FF15[00000000]              call    [exit]       ; call exit to terminate the program
