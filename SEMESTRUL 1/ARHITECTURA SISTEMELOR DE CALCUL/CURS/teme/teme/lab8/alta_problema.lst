     1                                  bits 32 
     2                                  
     3                                  global start        
     4                                  
     5                                  extern exit, fopen, fread, printf            
     6                                  import exit msvcrt.dll   
     7                                  import fopen msvcrt.dll
     8                                  import fread msvcrt.dll
     9                                  import printf msvcrt.dll 
    10                                  
    11                                  segment data use32 class=data
    12 00000000 696E7075742E747874-         fisier db "input.txt", 0
    12 00000009 00                 
    13 0000000A 612B00                      mod_acces db 'a+', 0
    14 0000000D FFFFFFFF                    descriptor_fisier dd -1
    15                                      
    16 00000011 00                          buffer db 0
    17                                      
    18 00000012 00                          suma db 0
    19                                  
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; fopen(nume, mod)
    23 00000000 68[0A000000]                    push dword mod_acces
    24 00000005 68[00000000]                    push dword fisier
    25 0000000A FF15[00000000]                  call [fopen]
    26 00000010 83C408                          add esp, 4 * 2
    27                                          
    28                                          ; verific daca s a deschis corect
    29 00000013 83F800                          cmp eax, 0
    30 00000016 747C                            je finish
    31 00000018 A3[0D000000]                    mov [descriptor_fisier], eax
    32                                          
    33                                          ; in ebx retin cifra curenta
    34                                          ; in edx construiesc numarul
    35 0000001D BB00000000                      mov ebx, 0
    36 00000022 BA00000000                      mov edx, 0
    37                                          while_parsare:
    38 00000027 60                                  pushad
    39                                              ; fscanf(variabila, size, count, descriptor)
    40 00000028 FF35[0D000000]                      push dword [descriptor_fisier]
    41 0000002E 6A01                                push dword 1
    42 00000030 6A01                                push dword 1
    43 00000032 68[11000000]                        push dword buffer
    44 00000037 FF15[00000000]                      call [fread]
    45 0000003D 83C410                              add esp, 4 * 4
    46                                              
    47 00000040 83F800                              cmp eax, 0
    48 00000043 743B                                je end_citire
    49                                              
    50 00000045 61                                  popad
    51                                              
    52 00000046 8B1D[11000000]                      mov ebx, [buffer]
    53 0000004C 83FB20                              cmp ebx, ' '
    54 0000004F 7414                                je space
    55                                              
    56                                              ; altfel e cifra
    57 00000051 50                                  push eax
    58 00000052 89D0                                mov eax, edx
    59                                              
    60 00000054 83EB30                              sub ebx, '0'
    61 00000057 BA0A000000                          mov edx, 10
    62 0000005C F7E2                                mul edx
    63 0000005E 01D8                                add eax, ebx ; am construit numarul
    64                                              
    65 00000060 89C2                                mov edx, eax
    66 00000062 58                                  pop eax
    67                                              
    68 00000063 EB18                                jmp continua
    69                                              
    70                                              space:
    71 00000065 83FA08                                  cmp edx, 8
    72 00000068 730E                                    jae nu_e_bine
    73                                                  
    74                                                  ; e bine 
    75 0000006A 8B1D[12000000]                          mov ebx, [suma]
    76 00000070 01D3                                    add ebx, edx
    77 00000072 891D[12000000]                          mov [suma], ebx
    78                                                  
    79                                              nu_e_bine:
    80 00000078 BA00000000                              mov edx, 0
    81                                              
    82                                              continua:
    83 0000007D 90                                      nop
    84                                                  
    85 0000007E EBA7                                jmp while_parsare
    86                                          
    87                                          end_citire:
    88 00000080 FF35[12000000]                      push dword [suma]
    89 00000086 6825640000                          push dword '%d'
    90 0000008B FF15[00000000]                      call [printf]
    91 00000091 83C408                              add esp, 4 * 2
    92                                              
    93                                      
    94                                      finish:
    95 00000094 6A00                            push dword 0    
    96 00000096 FF15[00000000]                  call [exit]       
