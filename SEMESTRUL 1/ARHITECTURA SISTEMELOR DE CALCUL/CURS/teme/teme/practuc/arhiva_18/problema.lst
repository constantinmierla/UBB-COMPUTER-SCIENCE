     1                                  bits 32 
     2                                  
     3                                  global start        
     4                                  
     5                                  extern exit, fopen, fread, printf, fclose               
     6                                  import exit msvcrt.dll   
     7                                  import fopen msvcrt.dll
     8                                  import fread msvcrt.dll 
     9                                  import printf msvcrt.dll
    10                                  import fclose msvcrt.dll
    11                                  
    12                                  ; Se citeste un sir din input.txt. sa se afiseze invers.
    13                                  
    14                                  segment data use32 class=data
    15 00000000 696E7075742E747874-         nume_fisier db 'input.txt', 0
    15 00000009 00                 
    16 0000000A FFFFFFFF                    descriptor_fisier dd -1
    17 0000000E 612B00                      mod_acces db 'a+', 0
    18                                      
    19 00000011 00<rept>                    sir_caractere times 100 db 0
    20 00000075 FFFFFFFF                    descriptor_sir dd -1
    21 00000079 00000000                    numar_caractere dd 0
    22                                      
    23 0000007D 00                          buffer db 0
    24                                      
    25 0000007E 256300                      format_char db '%c', 0
    26 00000081 256400                      format_int db '%d', 0
    27                                  
    28                                  segment code use32 class=code
    29                                      start:
    30                                          ; fopen
    31 00000000 68[0E000000]                    push dword mod_acces
    32 00000005 68[00000000]                    push dword nume_fisier
    33 0000000A FF15[00000000]                  call [fopen]
    34 00000010 83C408                          add esp, 4 * 2
    35                                          
    36 00000013 83F800                          cmp eax, 0
    37 00000016 0F8496000000                    je finish
    38 0000001C A3[0A000000]                    mov [descriptor_fisier], eax
    39                                          
    40                                          ; pregatire citire
    41 00000021 BF[11000000]                    mov edi, sir_caractere
    42 00000026 FC                              cld
    43                                          
    44                                          ; fread
    45 00000027 FF35[0A000000]                  push dword [descriptor_fisier]
    46 0000002D 6A01                            push dword 1
    47 0000002F 6A01                            push dword 1
    48 00000031 68[7D000000]                    push dword buffer
    49 00000036 FF15[00000000]                  call [fread]
    50 0000003C 83C410                          add esp, 4 * 4
    51                                          citire_fisier:
    52 0000003F 83F800                              cmp eax, 0
    53 00000042 7431                                je stop_citire
    54                                              
    55 00000044 A0[7D000000]                        mov al, [buffer]
    56                                              
    57                                              ; stochez caracterul din al
    58 00000049 AA                                  stosb
    59                                              
    60                                              ; update nr de caractere
    61 0000004A A1[79000000]                        mov eax, [numar_caractere]
    62 0000004F 40                                  inc eax
    63 00000050 A3[79000000]                        mov [numar_caractere], eax
    64                                              
    65                                              ; update descriptor_sir
    66 00000055 893D[75000000]                      mov [descriptor_sir], edi
    67                                              
    68                                              ; citire
    69 0000005B FF35[0A000000]                      push dword [descriptor_fisier]
    70 00000061 6A01                                push dword 1
    71 00000063 6A01                                push dword 1
    72 00000065 68[7D000000]                        push dword buffer
    73 0000006A FF15[00000000]                      call [fread]
    74 00000070 83C410                              add esp, 4 * 4
    75 00000073 EBCA                            jmp citire_fisier
    76                                          
    77                                          stop_citire:
    78                                              ; fclose()
    79 00000075 FF35[0A000000]                      push dword [descriptor_fisier]
    80 0000007B FF15[00000000]                      call [fclose]
    81 00000081 83C404                              add esp, 4
    82                                              
    83                                          ; afisare pe ecran
    84 00000084 8B0D[79000000]                  mov ecx, [numar_caractere]
    85 0000008A 41                              inc ecx
    86 0000008B 89FE                            mov esi, edi
    87 0000008D FD                              std
    88                                          afisare_invers:
    89 0000008E FD                                  std
    90 0000008F 890D[79000000]                      mov [numar_caractere], ecx
    91                                              
    92 00000095 B800000000                          mov eax, 0
    93 0000009A AC                                  lodsb       ; eax -> caracter
    94 0000009B 50                                  push eax
    95 0000009C 68[7E000000]                        push format_char
    96 000000A1 FF15[00000000]                      call [printf]
    97 000000A7 83C408                              add esp, 4 * 2
    98                                              
    99 000000AA 8B0D[79000000]                      mov ecx, [numar_caractere]
   100 000000B0 E2DC                            loop afisare_invers
   101                                          
   102                                      
   103                                      finish:
   104 000000B2 6A00                            push dword 0    
   105 000000B4 FF15[00000000]                  call [exit]       
