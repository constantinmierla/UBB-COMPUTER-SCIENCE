     1                                  ; se da sir de qwords, verific daca dword ul inferior are minim 2 secvente de 111 in binar
     2                                  ;daca are, salvez dword ul inferior si il afisez pe ecran in baza 2
     3                                  bits 32 ; assembling for the 32 bits architecture
     4                                  
     5                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     6                                  global start        
     7                                  
     8                                  ; declare external functions needed by our program
     9                                  extern exit,printf               ; tell nasm that exit exists even if we won't be defining it
    10                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                  import printf msvcrt.dll                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15 00000000 FFFFFFFF<rept>              dwords times 10 dd -1
    16 00000028 FFFFFFFF                    copie dd -1
    17 0000002C 00                          suma db 0
    18 0000002D 00                          cnt db 0
    19 0000002E 770000000000000000-         s dq 1110111b, 1000000000h, 0ABCD0002E7FCh,5
    19 00000037 00000010000000FCE7-
    19 00000040 0200CDAB0000050000-
    19 00000049 0000000000         
    20                                      lens equ $-s
    21 0000004E FFFFFFFF                    copie3 dd -1
    22 00000052 00                          ok db 0
    23 00000053 FFFFFFFF                    dword_inferior dd -1
    24 00000057 00                          cnt_edi db 0
    25 00000058 256400                      format_d db '%d',0
    26 0000005B 256300                      format_c db '%c',0
    27 0000005E 00                          afis db 0
    28 0000005F 00000000                    copie4 dd 0
    29 00000063 20000000                    spatiu dd ' '
    30                                      
    31 00000067 FF<rept>                    rez times 100 db -1
    32                                  
    33                                  ; our code starts here
    34                                  segment code use32 class=code
    35                                      start:
    36                                      
    37                                          ;verifica care dintre ele se incadreaza
    38 00000000 B904000000                      mov ecx, lens/8
    39 00000005 BE[2E000000]                    mov esi,s
    40 0000000A BF[00000000]                    mov edi, dwords
    41                                          
    42                                          repeta:
    43 0000000F 890D[28000000]                      mov [copie],ecx
    44 00000015 C605[52000000]00                    mov byte[ok],0
    45 0000001C C605[2C000000]00                    mov byte[suma],0
    46 00000023 C605[2D000000]00                    mov byte[cnt],0
    47 0000002A EB24                                jmp repeta_un_qword
    48                                              
    49                                              
    50                                              aici_inapoi:
    51                                              ;verific daca sunt 2 secvente 111 minim
    52 0000002C 803D[2D000000]02                    cmp byte[cnt],2
    53 00000033 7211                                jb nu_sunt
    54                                              
    55                                              ;aici intra daca sunt minim 2 secvente 111
    56                                              ;atunci stocam word ul inferior in edi
    57 00000035 A1[53000000]                        mov eax,[dword_inferior]
    58 0000003A 8907                                mov dword[edi],eax
    59 0000003C 83C704                              add edi,4
    60 0000003F 8005[57000000]01                    add byte[cnt_edi],1
    61                                              
    62                                              nu_sunt:
    63                                              
    64 00000046 8B0D[28000000]                      mov ecx,[copie]
    65 0000004C E2C1                            loop repeta
    66                                          
    67 0000004E EB67                            jmp final
    68                                          repeta_un_qword:
    69 00000050 803D[52000000]00                        cmp byte[ok],0
    70 00000057 7507                                    jne sari
    71                                                  ;daca suntem la dword ul inferior il stocam in caz ca ne trebuie mai tarziu
    72 00000059 8B06                                    mov eax,dword[esi]
    73 0000005B A3[53000000]                            mov dword[dword_inferior],eax
    74                                                  
    75                                                  sari:
    76 00000060 AD                                      lodsd ;in eax am a doua parte din qword ul din sir, apoi la urm parcurgere prima parte
    77 00000061 B910000000                              mov ecx,16
    78                                                  repeta_cnt:
    79 00000066 D1E8                                        shr eax,1
    80 00000068 8A3D[2C000000]                              mov bh,byte[suma]
    81 0000006E 8015[2C000000]00                            adc byte[suma],0
    82 00000075 3A3D[2C000000]                              cmp bh,byte[suma]
    83 0000007B 7418                                        je nu_e_continuu
    84                                                      
    85                                                      ;aici intra daca e continuu
    86 0000007D 803D[2C000000]03                            cmp byte[suma],3
    87 00000084 7516                                        jne nu_modifica ;daca nu a ajuns la secventa 111 dar 1 sunt continuu sa nu modifica nimic
    88                                                      
    89                                                      ;aici intra daca a gasit 111
    90 00000086 FE05[2D000000]                              inc byte[cnt] ; creste numarul de secvente 111 din qword
    91 0000008C C605[2C000000]00                            mov byte[suma],0 ; actualizeaza suma sa numere de la capat
    92 00000093 EB07                                        jmp nu_modifica ;sa sara peste nu e continuu
    93                                                      
    94                                                      nu_e_continuu:
    95 00000095 C605[2C000000]00                                mov byte[suma],0
    96                                                          
    97                                                      nu_modifica:
    98 0000009C E2C8                                    loop repeta_cnt
    99                                                  
   100 0000009E 803D[52000000]00                        cmp byte[ok],0 ;daca a facut doar a doua parte din qword si nu a trecut prin prima, ok este tot 0,altfel e 1
   101 000000A5 7402                                    je mai_fa_odata
   102                                                  
   103 000000A7 EB09                                    jmp final_repeta_un_qword
   104                                                  mai_fa_odata:
   105 000000A9 C605[52000000]01                            mov byte[ok],1
   106 000000B0 EB9E                                        jmp repeta_un_qword
   107                                              final_repeta_un_qword:
   108 000000B2 E975FFFFFF                          jmp aici_inapoi
   109                                              
   110                                              final:
   111                                              
   112                                              ;trebuie sa afisez sirul dwords in baza 2
   113 000000B7 B900000000                          mov ecx,0
   114 000000BC 8A0D[57000000]                      mov cl,byte[cnt_edi] ; atatea dwords avem de afisat  
   115 000000C2 BE[00000000]                        mov esi,dwords
   116                                              repeta_afisare:
   117 000000C7 BF[67000000]                            mov edi,rez
   118 000000CC AD                                      lodsd ;in eax avem primul dword
   119 000000CD 890D[28000000]                          mov [copie],ecx
   120 000000D3 B910000000                              mov ecx,16
   121                                                  repeta_dword:
   122 000000D8 D1E8                                        shr eax,1
   123 000000DA B300                                        mov bl,0
   124 000000DC 80D300                                      adc bl,0 ;in bl avem ultima cifra din dword ul nostru
   125 000000DF 881F                                        mov byte[edi],bl
   126 000000E1 47                                          inc edi
   127 000000E2 E2F4                                    loop repeta_dword
   128                                                  
   129                                                  ;afisam invers edi
   130                                                  repeta_afisare_invers:
   131 000000E4 4F                                          dec edi
   132 000000E5 81FF[66000000]                              cmp edi,rez-1
   133 000000EB 7418                                        je gata
   134                                                      
   135 000000ED BB00000000                                  mov ebx,0
   136 000000F2 8A1F                                        mov bl,byte[edi]
   137                                                      
   138 000000F4 53                                          push ebx
   139 000000F5 68[58000000]                                push dword format_d
   140 000000FA FF15[00000000]                              call [printf]
   141 00000100 83C408                                      add esp,4*2
   142 00000103 EBDF                                        jmp repeta_afisare_invers
   143                                                      
   144                                                  gata:
   145 00000105 FF35[63000000]                          push dword[spatiu]
   146 0000010B 68[5B000000]                            push dword format_c
   147 00000110 FF15[00000000]                          call [printf]
   148 00000116 83C408                                  add esp,4*2
   149                                                  
   150 00000119 8B0D[28000000]                          mov ecx,[copie]
   151                                              
   152 0000011F E2A6                                loop repeta_afisare
   153                                              
   154                                          
   155                                      
   156                                          ; exit(0)
   157 00000121 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   158 00000123 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
