     1                                  ;se citeste un sir din input.txt. sa se afiseze invers
     2                                  bits 32 ; assembling for the 32 bits architecture
     3                                  
     4                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     5                                  global start        
     6                                  
     7                                  ; declare external functions needed by our program
     8                                  extern exit,fscanf,fopen,fclose,printf               ; tell nasm that exit exists even if we won't be defining it
     9                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    10                                  import fopen msvcrt.dll                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    11                                  import fclose msvcrt.dll
    12                                  import printf msvcrt.dll
    13                                  import fscanf msvcrt.dll
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16 00000000 7200                        mod_acces_r db 'r',0
    17 00000002 696E7075742E747874-         nume db 'input.txt',0
    17 0000000B 00                 
    18 0000000C FFFFFFFF                    descriptor dd -1
    19 00000010 FF                          chr db -1
    20 00000011 256300                      format_c db '%c',0
    21 00000014 257300                      format_s db '%s',0
    22 00000017 FF<rept>                    sir times 100 db -1
    23                                  
    24                                  ; our code starts here
    25                                  segment code use32 class=code
    26                                      start:
    27                                          ;fopen(nume,mod_acces)
    28 00000000 68[00000000]                    push dword mod_acces_r
    29 00000005 68[02000000]                    push dword nume
    30 0000000A FF15[00000000]                  call [fopen]
    31 00000010 83C408                          add esp, 4*2
    32                                          
    33 00000013 83F800                          cmp eax,0
    34 00000016 7462                            je final_tot
    35 00000018 A3[0C000000]                    mov dword[descriptor],eax
    36                                        
    37 0000001D BF[17000000]                    mov edi,sir
    38                                          repeta:
    39                                              ;fscanf(descriptor,format,variabile)
    40 00000022 68[10000000]                        push dword chr
    41 00000027 68[11000000]                        push dword format_c
    42 0000002C FF35[0C000000]                      push dword[descriptor]
    43 00000032 FF15[00000000]                      call [fscanf]
    44 00000038 83C40C                              add esp,4*3
    45                                              
    46 0000003B 83F8FF                              cmp eax,-1
    47 0000003E 740A                                je final_repeta
    48                                              
    49 00000040 A0[10000000]                        mov al,byte[chr]
    50 00000045 8807                                mov byte[edi],al
    51 00000047 47                                  inc edi
    52 00000048 EBD8                                jmp repeta
    53                                          final_repeta:
    54                                          
    55                                          ;afisare invers
    56                                          repeta1:
    57 0000004A 4F                                  dec edi
    58 0000004B 81FF[16000000]                      cmp edi,sir-1
    59 00000051 7418                                je final_repeta1
    60                                              
    61 00000053 B800000000                          mov eax,0
    62 00000058 8A07                                mov al,byte[edi]
    63 0000005A 50                                  push eax
    64 0000005B 68[11000000]                        push dword format_c
    65 00000060 FF15[00000000]                      call [printf]
    66 00000066 83C408                              add esp,4*2
    67                                              
    68 00000069 EBDF                                jmp repeta1
    69                                          final_repeta1:
    70                                          
    71                                          
    72                                          ;fcolse(descriptor)
    73 0000006B FF35[0C000000]                  push dword[descriptor]
    74 00000071 FF15[00000000]                  call [fclose]
    75 00000077 83C404                          add esp,4*1
    76                                          final_tot:
    77                                          ; exit(0)
    78 0000007A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    79 0000007C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
