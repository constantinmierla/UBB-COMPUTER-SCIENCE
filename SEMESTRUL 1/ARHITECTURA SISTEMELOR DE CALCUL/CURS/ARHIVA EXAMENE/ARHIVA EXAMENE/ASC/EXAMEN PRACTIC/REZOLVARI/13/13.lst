     1                                  ;Se citeste de la tastatura un cuvant (sir de caractere de maxim 20 de caractere) si un numar reprezentat pe un octet. 
     2                                  ;Daca numarul este impar se cere criptarea cuvantului prin adunarea la fiecare caracter a numarului citit modulo 20. 
     3                                  ;Daca numarul este par se cere criptarea cuvantului prin adaugarea dupa fiecare consoana a gruparii "p"+consoana. Se cere afisarea cuvantului criptat
     4                                  bits 32 ; assembling for the 32 bits architecture
     5                                  
     6                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     7                                  global start        
     8                                  
     9                                  ; declare external functions needed by our program
    10                                  extern exit,scanf,printf               ; tell nasm that exit exists even if we won't be defining it
    11                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    12                                  import scanf msvcrt.dll
    13                                  import printf msvcrt.dll                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17 00000000 257320256400                format_citire db '%s %d',0
    18 00000006 FF<rept>                    s times 20 db -1
    19 0000001A FFFFFFFF                    nr dd -1
    20 0000001E 02                          doi db 2
    21 0000001F FF<rept>                    rezultat times 20 db -1
    22 00000033 2573                        format_afisare db '%s'
    23 00000035 14                          douazeci db 20
    24 00000036 FF                          cod db -1
    25 00000037 257300                      format db '%s',0
    26 0000003A 256300                      format_c db '%c',0
    27 0000003D 0A0D00                      new_line db 10,13,0
    28 00000040 FFFFFFFF                    copie dd -1
    29                                  
    30                                  ; our code starts here
    31                                  segment code use32 class=code
    32                                      start:
    33                                          ;scanf(format,variabile)
    34 00000000 68[1A000000]                    push dword nr
    35 00000005 68[06000000]                    push dword s
    36 0000000A 68[00000000]                    push dword format_citire
    37 0000000F FF15[00000000]                  call [scanf]
    38                                          
    39                                          
    40                                          ;verificare paritate
    41 00000015 A1[1A000000]                    mov eax,dword[nr]
    42 0000001A F635[1E000000]                  div byte[doi] ;ah-rest
    43 00000020 80FC00                          cmp ah,0
    44 00000023 743D                            je par
    45 00000025 7500                            jne impar
    46                                          
    47                                          impar:
    48 00000027 A1[1A000000]                        mov eax,dword[nr]
    49 0000002C F635[35000000]                      div byte[douazeci] ;ah-rest
    50 00000032 8825[36000000]                      mov byte[cod],ah
    51 00000038 BE[06000000]                        mov esi,s
    52                                              repeta:
    53 0000003D B800000000                              mov eax,0
    54 00000042 AC                                      lodsb
    55 00000043 3C00                                    cmp al,0
    56 00000045 0F8489000000                            je final ;inseamna ca ma terminat de criptat
    57 0000004B 0205[36000000]                          add al,byte[cod]
    58                                                  
    59                                                  ;afisare caracter format
    60 00000051 50                                      push dword eax
    61 00000052 68[3A000000]                            push dword format_c
    62 00000057 FF15[00000000]                          call [printf]
    63 0000005D 83C408                                  add esp,4*2
    64                                                  
    65 00000060 EBDB                                    jmp repeta
    66                                          
    67                                          
    68                                          par:
    69 00000062 BE[06000000]                        mov esi,s
    70                                              repeta1:
    71 00000067 B800000000                              mov eax,0
    72 0000006C AC                                      lodsb
    73 0000006D 3C00                                    cmp al,0
    74 0000006F 7463                                    je final
    75                                                  
    76 00000071 3C61                                    cmp al,'a'
    77 00000073 744E                                    je vocala
    78 00000075 3C65                                    cmp al,'e'
    79 00000077 744A                                    je vocala
    80 00000079 3C69                                    cmp al,'i'
    81 0000007B 7446                                    je vocala
    82 0000007D 3C6F                                    cmp al,'o'
    83 0000007F 7442                                    je vocala
    84 00000081 3C75                                    cmp al,'u'
    85 00000083 743E                                    je vocala ;adica sare peste modificare
    86                                                  
    87                                                  consoana:
    88 00000085 A3[40000000]                                mov [copie],eax
    89 0000008A 50                                          push dword eax
    90 0000008B 68[3A000000]                                push dword format_c
    91 00000090 FF15[00000000]                              call [printf]
    92 00000096 83C408                                      add esp,4*2
    93                                                      
    94 00000099 BB70000000                                  mov ebx,'p'
    95 0000009E 53                                          push dword ebx
    96 0000009F 68[3A000000]                                push dword format_c
    97 000000A4 FF15[00000000]                              call [printf]
    98 000000AA 83C408                                      add esp,4*2
    99                                                      
   100 000000AD A1[40000000]                                mov eax,[copie]
   101 000000B2 50                                          push dword eax
   102 000000B3 68[3A000000]                                push dword format_c
   103 000000B8 FF15[00000000]                              call [printf]
   104 000000BE 83C408                                      add esp,4*2
   105                                                  
   106 000000C1 EBA4                                    jmp repeta1
   107                                                  
   108                                                  vocala:
   109 000000C3 50                                          push dword eax
   110 000000C4 68[3A000000]                                push dword format_c
   111 000000C9 FF15[00000000]                              call [printf]
   112 000000CF 83C408                                      add esp,4*2
   113                                              
   114 000000D2 EB93                                    jmp repeta1
   115                                          final:
   116                                  
   117                                          ; exit(0)
   118 000000D4 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   119 000000D6 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
