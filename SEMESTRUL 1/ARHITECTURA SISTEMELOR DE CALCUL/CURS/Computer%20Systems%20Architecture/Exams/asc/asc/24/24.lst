     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  extern fopen, fprintf, fclose
    11                                  import fopen msvcrt.dll
    12                                  import fprintf msvcrt.dll
    13                                  import fclose msvcrt.dll
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16                                      ; ...
    17 00000000 7700                        mode_access db 'w', 0
    18 00000002 32342E74787400              file_name db '24.txt', 0
    19 00000009 FFFFFFFF                    file_descriptor dd -1
    20                                      
    21 0000000D 647373617363733266-         string db 'dssascs2fsa4sdsaGJGKDC222@q!-DS210!'
    21 00000016 73613473647361474A-
    21 0000001F 474B44433232324071-
    21 00000028 212D445332313021   
    22                                      string_len equ ($ - string)
    23                                      
    24 00000030 FF<rept>                    updated_string times (string_len + 1) db -1
    25                                      
    26 00000054 257300                      print_format db '%s', 0
    27                                  ; our code starts here
    28                                  segment code use32 class=code
    29                                      start:
    30                                          ; Se dau un nume de fisier si un text (definite in segmentul de date). Textul contine litere mici, litere mari, cifre si caractere speciale. Sa se inlocuiasca toate CIFRELE din textul dat cu caracterul 'C'. 
    31                                          
    32                                          ; open the file
    33 00000000 68[00000000]                    push dword mode_access
    34 00000005 68[02000000]                    push dword file_name
    35 0000000A FF15[00000000]                  call [fopen]
    36 00000010 83C408                          add esp, 4 * 2
    37                                          
    38                                          ; check if the file opened correctly
    39 00000013 83F800                          cmp eax, 0
    40 00000016 744D                            je final
    41 00000018 A3[09000000]                    mov [file_descriptor], eax
    42                                          
    43                                          ; iterate through the string
    44 0000001D BE[0D000000]                    mov esi, string
    45 00000022 BF[30000000]                    mov edi, updated_string
    46 00000027 B923000000                      mov ecx, string_len
    47                                          loop_string:
    48 0000002C AC                                  lodsb ; move into al the character from esi
    49                                              
    50                                              ; check if the character is a digit
    51 0000002D 3C30                                cmp al, '0'
    52 0000002F 7206                                jb not_a_digit
    53 00000031 3C39                                cmp al, '9'
    54 00000033 7702                                ja not_a_digit
    55                                              
    56                                              ; if we reach this point, the character is a digit - we replace it with C
    57 00000035 B043                                mov al, 'C'
    58                                              
    59                                              not_a_digit:
    60 00000037 AA                                  stosb ; store it into edi
    61 00000038 E2F2                            loop loop_string
    62                                          
    63                                          ; for C printing we need to append 0 to the end of the updated_string
    64 0000003A B000                            mov al, 0
    65 0000003C AA                              stosb
    66                                          
    67                                          ; print the string
    68 0000003D 68[30000000]                    push dword updated_string
    69 00000042 68[54000000]                    push dword print_format
    70 00000047 FF35[09000000]                  push dword [file_descriptor]
    71 0000004D FF15[00000000]                  call [fprintf]
    72 00000053 83C40C                          add esp, 4 * 3
    73                                          
    74                                          ; close the file 
    75 00000056 FF35[09000000]                  push dword [file_descriptor]
    76 0000005C FF15[00000000]                  call [fclose]
    77 00000062 83C404                          add esp, 4
    78                                          
    79                                          final:
    80                                          ; exit(0)
    81 00000065 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    82 00000067 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
