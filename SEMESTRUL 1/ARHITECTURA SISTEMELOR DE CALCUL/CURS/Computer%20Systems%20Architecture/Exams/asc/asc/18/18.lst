     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  extern fopen, fclose, printf, fread
    11                                  import fopen msvcrt.dll
    12                                  import fclose msvcrt.dll
    13                                  import printf msvcrt.dll
    14                                  import fread msvcrt.dll
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17                                      ; ...
    18                                      
    19 00000000 7200                        mode_access db 'r', 0
    20 00000002 31382E74787400              file_name db '18.txt', 0
    21 00000009 FFFFFFFF                    file_descriptor dd -1
    22                                      
    23 0000000D 00000000                    char dd 0
    24 00000011 00000000                    words dd 0
    25 00000015 256400                      print_format db '%d', 0
    26                                      
    27                                  ; our code starts here
    28                                  segment code use32 class=code
    29                                      start:
    30                                          ; A text file is given. The text contains letters, spaces and points. Read the content of the file, determine the number of words and display the result on the screen. (A word is a sequence of characters sep
    31                                      
    32                                          ; open the file 
    33 00000000 68[00000000]                    push dword mode_access
    34 00000005 68[02000000]                    push dword file_name
    35 0000000A FF15[00000000]                  call [fopen]
    36 00000010 83C408                          add esp, 4 * 2
    37                                          
    38                                          ; check if the file opened correctly
    39 00000013 83F800                          cmp eax, 0
    40 00000016 0F848E000000                    je final
    41 0000001C A3[09000000]                    mov [file_descriptor], eax 
    42                                          
    43                                          ; read char by char from file
    44                                          while_read:
    45                                              ; read the char
    46 00000021 FF35[09000000]                      push dword [file_descriptor]
    47 00000027 6A01                                push dword 1
    48 00000029 6A01                                push dword 1
    49 0000002B 68[0D000000]                        push dword char
    50 00000030 FF15[00000000]                      call [fread]
    51 00000036 83C410                              add esp, 4 * 4
    52                                              
    53                                              ; check if anything was read
    54 00000039 83F800                              cmp eax, 0
    55 0000003C 7449                                je end_while_read
    56                                              
    57                                              ; check if it's a space or a point
    58 0000003E 803D[0D000000]20                    cmp byte [char], ' '
    59 00000045 74DA                                je while_read
    60 00000047 803D[0D000000]2E                    cmp byte [char], '.'
    61 0000004E 74D1                                je while_read
    62                                              
    63                                              ; if it's not a space, nor a point - it's a letter
    64                                              ; we increment the number of words
    65                                              ; we read the letters from the word as long as we can
    66 00000050 FF05[11000000]                      inc dword [words]
    67                                              while_read_letters:
    68                                                  ; read the char
    69 00000056 FF35[09000000]                          push dword [file_descriptor]
    70 0000005C 6A01                                    push dword 1
    71 0000005E 6A01                                    push dword 1
    72 00000060 68[0D000000]                            push dword char
    73 00000065 FF15[00000000]                          call [fread]
    74 0000006B 83C410                                  add esp, 4 * 4
    75                                                  
    76                                                  ; check if anything was read
    77 0000006E 83F800                                  cmp eax, 0
    78 00000071 7414                                    je end_while_read
    79                                                  
    80                                                  ; check if it's a space or a point
    81 00000073 803D[0D000000]20                        cmp byte [char], ' '
    82 0000007A 74A5                                    je while_read
    83 0000007C 803D[0D000000]2E                        cmp byte [char], '.'
    84 00000083 749C                                    je while_read
    85                                                  
    86 00000085 EBCF                                    jmp while_read_letters
    87                                              
    88                                          end_while_read: 
    89                                          ; print the result
    90 00000087 FF35[11000000]                  push dword [words]
    91 0000008D 68[15000000]                    push dword print_format
    92 00000092 FF15[00000000]                  call [printf]
    93 00000098 83C408                          add esp, 4 * 2
    94                                          
    95                                          ; close the file
    96 0000009B FF35[09000000]                  push dword [file_descriptor]
    97 000000A1 FF15[00000000]                  call [fclose]
    98 000000A7 83C404                          add esp, 4
    99                                          final:
   100                                          ; exit(0)
   101 000000AA 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   102 000000AC FF15[00000000]                  call    [exit]       ; call exit to terminate the program
