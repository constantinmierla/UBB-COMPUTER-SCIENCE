     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  extern fopen, fclose, fprintf
    11                                  import fopen msvcrt.dll
    12                                  import fclose msvcrt.dll
    13                                  import fprintf msvcrt.dll
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16                                      ; ...
    17 00000000 6100                        mode_access db 'a', 0
    18 00000002 31352E74787400              file_name db '15.txt', 0
    19 00000009 FFFFFFFF                    file_descriptor dd -1
    20                                      
    21 0000000D 00000000                    char dd 0
    22                                      
    23 00000011 546869732369732373-         text db 'This#is#such#a123@@@!!nice00wo!-'
    23 0000001A 756368236131323340-
    23 00000023 404021216E69636530-
    23 0000002C 30776F212D         
    24                                      text_len equ ($ - text)
    25 00000031 <res 00000021>              updated_text resb (text_len + 1)
    26                                      
    27 00000052 257300                      print_format db '%s', 0
    28                                  ; our code starts here
    29                                  segment code use32 class=code
    30                                      start:
    31                                          ; A file name and a text (defined in the data segment) are given. The text contains lowercase letters, uppercase letters, digits and special characters. Replace all the special characters from the given text
    32                                          
    33                                          ; open the file
    34 00000000 68[00000000]                    push dword mode_access
    35 00000005 68[02000000]                    push dword file_name
    36 0000000A FF15[00000000]                  call [fopen]
    37 00000010 83C408                          add esp, 4 * 2
    38                                          
    39                                          ; check if the file was opened correctly
    40 00000013 83F800                          cmp eax, 0
    41 00000016 7466                            je final
    42 00000018 A3[09000000]                    mov [file_descriptor], eax
    43                                          
    44 0000001D BE[11000000]                    mov esi, text
    45 00000022 BF[31000000]                    mov edi, updated_text
    46 00000027 B920000000                      mov ecx, text_len
    47                                          ; iterate through the text
    48                                          while_read:
    49                                              ; get the character
    50 0000002C AC                                  lodsb
    51                                             
    52 0000002D 3C30                                cmp al, '0'
    53 0000002F 7207                                jb not_a_digit
    54 00000031 3C39                                cmp al, '9'
    55 00000033 7703                                ja not_a_digit
    56                                              ; if we reach here - it is a digit - we read again
    57 00000035 AA                                  stosb
    58 00000036 EB19                                jmp read_again
    59                                              
    60                                              not_a_digit:
    61 00000038 3C61                                cmp al, 'a'
    62 0000003A 7207                                jb not_a_lowercase_letter
    63 0000003C 3C7A                                cmp al, 'z'
    64 0000003E 7703                                ja not_a_lowercase_letter
    65                                              ; if we reach here - it is a lowercase letter - we read again
    66 00000040 AA                                  stosb
    67 00000041 EB0E                                jmp read_again
    68                                              
    69                                              not_a_lowercase_letter:
    70 00000043 3C41                                cmp al, 'A'
    71 00000045 7207                                jb not_an_uppercase_letter
    72 00000047 3C5A                                cmp al, 'Z'
    73 00000049 7703                                ja not_an_uppercase_letter
    74                                              ; if we reach here - it is an uppercase letter - we read again
    75 0000004B AA                                  stosb
    76 0000004C EB03                                jmp read_again
    77                                              
    78                                              not_an_uppercase_letter:
    79                                              ; if we reach here - it is a special character
    80 0000004E B058                                mov al, 'X'
    81 00000050 AA                                  stosb
    82                                              
    83                                              read_again:
    84 00000051 E2D9                                loop while_read
    85                                              
    86                                          end_while_read:
    87 00000053 B000                            mov al, 0
    88 00000055 AA                              stosb
    89                                          
    90                                          ; print the text
    91 00000056 68[31000000]                    push dword updated_text
    92 0000005B 68[52000000]                    push dword print_format
    93 00000060 FF35[09000000]                  push dword [file_descriptor]
    94 00000066 FF15[00000000]                  call [fprintf]
    95 0000006C 83C40C                          add esp, 4 * 3
    96                                          
    97                                          ; close the file
    98 0000006F FF35[09000000]                  push dword [file_descriptor]
    99 00000075 FF15[00000000]                  call [fclose]
   100 0000007B 83C404                          add esp, 4
   101                                          
   102                                          final:
   103                                          ; exit(0)
   104 0000007E 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   105 00000080 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
