     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  extern fopen, fread, fprintf, fclose
    11                                  import fopen msvcrt.dll
    12                                  import fread msvcrt.dll
    13                                  import fprintf msvcrt.dll
    14                                  import fclose msvcrt.dll
    15                                  
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data
    18                                      ; ...
    19                                      
    20 00000000 612B00                      mode_access db 'a+', 0
    21 00000003 32372E74787400              file_name db '27.txt', 0
    22                                      
    23 0000000A FFFFFFFF                    file_descriptor dd -1
    24 0000000E 00000000                    a_char dd 0
    25                                      
    26 00000012 0A000000                    ten dd 10
    27 00000016 FFFFFF7F                    minimum dd 2147483647 ; biggest number on signed dwords
    28                                      
    29 0000001A FFFFFFFF                    sign dd -1
    30                                      
    31 0000001E 20256400                    print_format db ' %d', 0
    32                                  ; our code starts here
    33                                  segment code use32 class=code
    34                                      start:
    35                                          ; Se da un fisier text. Fisierul contine numere (in baza 10) separate prin spatii. Sa se citeasca continutul acestui fisier, sa se determine minimul numerelor citite si sa se scrie rezultatul la sfarsitul fi
    36                                          
    37                                          ; open the file
    38 00000000 68[00000000]                    push dword mode_access
    39 00000005 68[03000000]                    push dword file_name
    40 0000000A FF15[00000000]                  call [fopen]
    41 00000010 83C408                          add esp, 4 * 2
    42                                          
    43                                          ; check if the file opened correctly
    44 00000013 83F800                          cmp eax, 0
    45 00000016 0F84DC000000                    je final
    46 0000001C A3[0A000000]                    mov [file_descriptor], eax
    47                                          
    48                                          ; read the file character by character
    49                                          while_read_char:
    50                                              
    51                                              ; read a character
    52 00000021 FF35[0A000000]                      push dword [file_descriptor]
    53 00000027 6A01                                push dword 1
    54 00000029 6A01                                push dword 1
    55 0000002B 68[0E000000]                        push dword a_char
    56 00000030 FF15[00000000]                      call [fread]
    57 00000036 83C410                              add esp, 4 * 4
    58                                              
    59                                              ; check if we read at least something
    60 00000039 83F800                              cmp eax, 0
    61 0000003C 0F848D000000                        je end_while_read_char
    62                                              
    63                                              ; check if the character is a space - in this case we read another one
    64 00000042 803D[0E000000]20                    cmp byte [a_char], ' '
    65 00000049 74D6                                je while_read_char
    66                                              
    67                                              ; check if the character is a '-'
    68 0000004B 803D[0E000000]2D                    cmp byte [a_char], '-'
    69 00000052 B800000000                          mov eax, 0
    70 00000057 C705[1A000000]FFFF-                 mov dword [sign], -1
    70 0000005F FFFF               
    71 00000061 7412                                je while_digit
    72                                              
    73                                              ; if it was not a space, nor a '-', it is a digit 
    74 00000063 A1[0E000000]                        mov eax, [a_char] ; in eax we build the number
    75 00000068 83E830                              sub eax, 48 ; we convert it into decimal
    76 0000006B C705[1A000000]0100-                 mov dword [sign], 1
    76 00000073 0000               
    77                                              
    78                                              ; now we read digits as long as we can
    79                                              while_digit:
    80 00000075 60                                      pushad ; we have to keep the number in eax - so we don't want the registers to be changed
    81                                                  
    82                                                  ; we read another character
    83 00000076 FF35[0A000000]                          push dword [file_descriptor]
    84 0000007C 6A01                                    push dword 1
    85 0000007E 6A01                                    push dword 1
    86 00000080 68[0E000000]                            push dword a_char
    87 00000085 FF15[00000000]                          call [fread]
    88 0000008B 83C410                                  add esp, 4 * 4
    89                                                  
    90                                                  ; check if something was at least read
    91 0000008E 83F800                                  cmp eax, 0
    92 00000091 7503                                    jne more_char ; if something was read we keep going
    93                                                  
    94                                                  ; if nothing was read at this point, we still need to pop back the value to eax and compare it to the minimum in case we find a better minimum
    95 00000093 61                                      popad
    96 00000094 EB1D                                    jmp end_while_digit ; but of course, we end our while_digit loop
    97                                                  
    98                                                  more_char:
    99 00000096 61                                      popad ; give back the value to the registers
   100                                                          
   101                                                  ; check if it's a space
   102 00000097 803D[0E000000]20                        cmp byte [a_char], ' '
   103 0000009E 7413                                    je end_while_digit
   104                                                  
   105                                                  ; if it was not a space - it was another digit 
   106 000000A0 8B1D[0E000000]                          mov ebx, [a_char]
   107 000000A6 83EB30                                  sub ebx, 48 ; we convert it into decimal
   108                                                  
   109                                                  ; now we want to compute the new number eax = eax * 10 + ebx
   110 000000A9 F725[12000000]                          mul dword [ten] ; we assume the result will fit into a doubleword - edx:eax = eax * 10 - but we don't really care about edx, since the actual result is still in eax
   111 000000AF 01D8                                    add eax, ebx ; eax * 10 = eax * 10 + ebx
   112                                                  
   113 000000B1 EBC2                                    jmp while_digit ; we read another one
   114                                               
   115                                              end_while_digit:
   116                                              
   117                                              ; we assign the sign :)
   118 000000B3 F725[1A000000]                      mul dword [sign] ; the result is still inside eax
   119                                              
   120                                              ; here we have our number inside eax - we compare it with the minimum
   121 000000B9 3B05[16000000]                      cmp eax, [minimum]
   122 000000BF 0F8D5CFFFFFF                        jge while_read_char ; the number is irelevant - we proceed on reading another one
   123                                              
   124                                              ; if we reached here, it means that the number is lower - we update the minimum
   125 000000C5 A3[16000000]                        mov [minimum], eax
   126 000000CA E952FFFFFF                          jmp while_read_char
   127                                          
   128                                          end_while_read_char:
   129                                          
   130                                          ; append the minimum
   131 000000CF FF35[16000000]                  push dword [minimum]
   132 000000D5 68[1E000000]                    push dword print_format
   133 000000DA FF35[0A000000]                  push dword [file_descriptor]
   134 000000E0 FF15[00000000]                  call [fprintf]
   135 000000E6 83C40C                          add esp, 4 * 3
   136                                          
   137                                          ; close the file
   138 000000E9 FF35[0A000000]                  push dword [file_descriptor]
   139 000000EF FF15[00000000]                  call [fclose]
   140 000000F5 83C404                          add esp, 4
   141                                          
   142                                          final:
   143                                          ; exit(0)
   144 000000F8 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   145 000000FA FF15[00000000]                  call    [exit]       ; call exit to terminate the program
