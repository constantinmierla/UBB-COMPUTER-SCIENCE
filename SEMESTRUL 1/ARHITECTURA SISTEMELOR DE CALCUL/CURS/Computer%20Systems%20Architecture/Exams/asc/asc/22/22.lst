     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  extern fopen, fprintf, fclose
    11                                  import fopen msvcrt.dll
    12                                  import fprintf msvcrt.dll
    13                                  import fclose msvcrt.dll
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16                                      ; ...
    17 00000000 6100                        mode_access db 'a', 0
    18 00000002 32322E74787400              file_name db '22.txt', 0
    19 00000009 FFFFFFFF                    file_descriptor dd -1
    20                                      
    21 0000000D 1700                        decimal_number dw 23
    22 0000000F 1027                        ten_power dw 10000
    23 00000011 0A00                        ten dw 10
    24 00000013 00000000                    digit dd 0
    25                                      
    26 00000017 25640A00                    print_format db '%d', 10, 0
    27                                  ; our code starts here
    28                                  segment code use32 class=code
    29                                      start:
    30                                          ; A file name and a decimal number (on 16 bits) are given (the decimal number is in the unsigned interpretation). Create a file with the given name and write each digit composing the number on a different li
    31                                          
    32                                          ; open the file
    33 00000000 68[00000000]                    push dword mode_access
    34 00000005 68[02000000]                    push dword file_name
    35 0000000A FF15[00000000]                  call [fopen]
    36 00000010 83C408                          add esp, 4 * 2
    37                                          
    38                                          ; check if the file opened correctly
    39 00000013 83F800                          cmp eax, 0
    40 00000016 0F84E2000000                    je final 
    41 0000001C A3[09000000]                    mov [file_descriptor], eax
    42                                          
    43                                          ; iterate through the number's digits from left to right
    44                                          ; since the number is an unsigned on 16 bits - it is maximum 65.535 - 5 digits
    45                                          
    46                                          ; first of all, we need to find the first digit that is different from 0 starting from left (i.e. - if we have the number 43 we won't display 00043)
    47                                          
    48                                          ; to get the digit from the position 5 - we divide the number to 10^4 => then, the number is updated with the remainder of this divison
    49                                          ; to get the digit from the position 4 - we divide the number to 10^3 => then, the number is updated with the remainder of this divison
    50                                          ; and so on
    51                                          
    52 00000021 66A1[0D000000]                  mov ax, [decimal_number] ; we keep the number inside ax
    53                                          
    54                                          find_first_digit_not_0:
    55 00000027 6689C1                              mov cx, ax ; keep an old copy of the number
    56                                              
    57                                              ; move ax into dx:ax to perform division
    58 0000002A 66BA0000                            mov dx, 0
    59                                              
    60                                              ; make the divison
    61 0000002E 66F735[0F000000]                    div word [ten_power] ; now in ax we have the current digit, and in dx the updated number (the reminder)
    62 00000035 6689D3                              mov bx, dx ; since we need dx later on, we keep the reminder (aka the updated number) in bx
    63                                              
    64 00000038 6683F800                            cmp ax, 0
    65 0000003C 7522                                jne print_digits ; we found the first non-zero digit
    66                                             
    67                                              ; otherwise - the number is not that big - we just update the ten_power and we assign the updated number
    68                                              
    69 0000003E 66A1[0F000000]                      mov ax, [ten_power] ; ax = ten_power
    70 00000044 66BA0000                            mov dx, 0 ; dx:ax = ax = ten_power
    71 00000048 66F735[11000000]                    div word [ten] ; ax = dx:ax / 10 = the new ten_power
    72 0000004F 66A3[0F000000]                      mov [ten_power], ax ; update the new ten_power
    73                                              
    74 00000055 6689D8                              mov ax, bx ; ax = bx = the new updated number
    75                                              
    76                                              ; if the number becomes 0 - it means the number is itself 0
    77 00000058 6683F800                            cmp ax, 0
    78 0000005C 746D                                je number_is_0
    79                                              
    80 0000005E EBC7                                jmp find_first_digit_not_0
    81                                              
    82                                          print_digits: 
    83                                              ; we get each digit and we print it - we do almost the same as above
    84                                              ; we also need our old number before we checked if the first digit was different from 0 (that's why we made that "old copy")
    85 00000060 6689C8                              mov ax, cx
    86                                              
    87                                              ; move ax into dx:ax to perform division
    88 00000063 66BA0000                            mov dx, 0
    89                                              
    90                                              ; make the divison
    91 00000067 66F735[0F000000]                    div word [ten_power] ; now in ax we have the current digit, and in dx the updated number
    92 0000006E 6689D3                              mov bx, dx ; since we need dx later on, we keep the reminder (aka the updated number) in bx
    93                                              
    94                                              ; print the digit - since we push a doubleword we update the variable digit in two steps
    95 00000071 66A3[13000000]                      mov word [digit], ax
    96 00000077 66C705[15000000]00-                 mov word [digit + 2], 0
    96 0000007F 00                 
    97                                              
    98 00000080 60                                  pushad
    99 00000081 FF35[13000000]                      push dword [digit]
   100 00000087 68[17000000]                        push dword print_format
   101 0000008C FF35[09000000]                      push dword [file_descriptor]
   102 00000092 FF15[00000000]                      call [fprintf]
   103 00000098 83C40C                              add esp, 4 * 3
   104 0000009B 61                                  popad
   105                                             
   106                                              ; update the ten_power and assign the updated number
   107 0000009C B800000000                          mov eax, 0 ; eax = 0
   108 000000A1 66A1[0F000000]                      mov ax, [ten_power] ; eax = ax = ten_power
   109 000000A7 66BA0000                            mov dx, 0 ; dx:ax = ax = ten_power
   110 000000AB 66F735[11000000]                    div word [ten] ; ax = dx:ax / 10 = the new ten_power
   111 000000B2 66A3[0F000000]                      mov [ten_power], ax ; update the new ten_power
   112                                              
   113 000000B8 B800000000                          mov eax, 0 ; eax = 0
   114 000000BD 6689D8                              mov ax, bx ; ax = eax = the new updated number
   115                                              
   116                                              ; if the number becomes 0 - we end the loop
   117 000000C0 6683F800                            cmp ax, 0
   118 000000C4 7429                                je close_file
   119                                              
   120                                              ; otherwise, we need to compute new digits to print
   121 000000C6 E95CFFFFFF                          jmp find_first_digit_not_0
   122                                          
   123                                          number_is_0:
   124                                          ; if we didn't enter the print_digits loop, it means the number is itself 0 - we need to print only 0
   125 000000CB C705[13000000]0000-             mov dword [digit], 0
   125 000000D3 0000               
   126 000000D5 FF35[13000000]                  push dword [digit]
   127 000000DB 68[17000000]                    push dword print_format
   128 000000E0 FF35[09000000]                  push dword [file_descriptor]
   129 000000E6 FF15[00000000]                  call [fprintf]
   130 000000EC 83C40C                          add esp, 4 * 3
   131                                          
   132                                          close_file:
   133 000000EF FF35[09000000]                  push dword [file_descriptor]
   134 000000F5 FF15[00000000]                  call [fclose]
   135 000000FB 83C404                          add esp, 4
   136                                          
   137                                          final:
   138                                          ; exit(0)
   139 000000FE 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   140 00000100 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
