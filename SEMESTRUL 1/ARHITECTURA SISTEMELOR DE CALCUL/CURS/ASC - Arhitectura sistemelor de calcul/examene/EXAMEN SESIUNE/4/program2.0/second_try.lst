     1                                  ;se da sir de qwords, verific daca dword ul inferior are minim 2 secvente de 111 in binar
     2                                  ;daca are, salvez dword ul inferior si il afisez pe ecran in baza 2
     3                                  bits 32 ; assembling for the 32 bits architecture
     4                                  
     5                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     6                                  global start        
     7                                  
     8                                  ; declare external functions needed by our program
     9                                  extern exit,printf               ; tell nasm that exit exists even if we won't be defining it
    10                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                  import printf msvcrt.dll                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15 00000000 FFFFFFFF<rept>              dwords times 10 dd -1
    16 00000028 00                          cnt db 0
    17 00000029 00                          suma db 0
    18 0000002A 7700000000000000DD-         s dq 00000000000000000000000001110111b, 00000000000000000000001011011101b
    18 00000033 02000000000000     
    19                                      lens equ $-s
    20 0000003A FFFFFFFF                    copie dd -1
    21 0000003E FFFF                        copie_ax dw -1
    22 00000040 FFFF                        copie_dx dw -1
    23 00000042 00                          cnt_dwords db 0
    24 00000043 FF<rept>                    rez times 100 db -1
    25 000000A7 256400                      format_d db '%d',0
    26 000000AA 256300                      format_c db '%c',0
    27 000000AD 20000000                    spatiu dd ' '
    28                                  
    29                                      
    30                                  
    31                                  ; our code starts here
    32                                  segment code use32 class=code
    33                                      start:
    34 00000000 BE[2A000000]                    mov esi,s
    35 00000005 BF[00000000]                    mov edi,dwords
    36 0000000A B902000000                      mov ecx,lens/8
    37                                          
    38                                          repeta:
    39                                          
    40 0000000F AD                                  lodsd ;in memorie sunt puse invers, deci aici a fost incarcat dword inferior in dx:ax
    41 00000010 66A3[3E000000]                      mov [copie_ax],ax
    42 00000016 668915[40000000]                    mov [copie_dx],dx
    43                                              
    44                                              ;verificam daca are 2 secvente 111
    45 0000001D 890D[3A000000]                      mov [copie],ecx
    46                                              
    47 00000023 EB27                                jmp verificare
    48                                              
    49                                              gata_verificare:
    50                                              
    51                                              ;daca avem 111>=2 atunci il adaugam intr-un sir de dwords
    52 00000025 803D[28000000]02                    cmp byte[cnt],2
    53 0000002C 7C0E                                jl sari_3
    54                                              
    55                                              ;daca a ajuns aici trebuie salvat
    56 0000002E 66A1[3E000000]                      mov ax,[copie_ax]
    57 00000034 668B15[40000000]                    mov dx,[copie_dx]
    58 0000003B AB                                  stosd
    59                                              
    60                                              sari_3:
    61                                              
    62 0000003C 8B0D[3A000000]                      mov ecx,[copie]
    63 00000042 AD                                  lodsd ;ca sa trecem de dword ul high din acest qword
    64 00000043 8005[42000000]01                    add byte[cnt_dwords],1
    65                                          
    66 0000004A E2C3                            loop repeta
    67                                          
    68                                          
    69                                          verificare:
    70 0000004C B910000000                          mov ecx,16
    71 00000051 C605[29000000]00                    mov byte[suma],0
    72 00000058 C605[28000000]00                    mov byte[cnt],0
    73                                              ;verificam partea inferioara
    74                                              repeta1:
    75                                                  
    76 0000005F 66D1E8                                  shr ax,1
    77 00000062 8A3D[29000000]                          mov bh,byte[suma]
    78 00000068 8015[29000000]00                        adc byte[suma],0
    79 0000006F 3A3D[29000000]                          cmp bh,byte[suma]
    80 00000075 7402                                    je nu_e_continuu_1
    81 00000077 EB07                                    jmp sari_nu_e_continuu_1
    82                                                  nu_e_continuu_1:
    83 00000079 C605[29000000]00                            mov byte[suma],0
    84                                                  sari_nu_e_continuu_1:
    85                                                  
    86 00000080 803D[29000000]03                        cmp byte[suma],3
    87 00000087 750E                                    jne sari_1
    88                                                  
    89                                                  ;daca a ajuns aici avem un sir 111
    90 00000089 C605[29000000]00                        mov byte[suma],0
    91 00000090 8005[28000000]01                        add byte[cnt],1
    92                                                  
    93                                                  sari_1:
    94                                              
    95 00000097 E2C6                                loop repeta1
    96                                              
    97                                              ;acum verificam in continuare partea superioara
    98 00000099 B910000000                          mov ecx,16
    99                                  
   100                                              repeta2:
   101                                                  
   102 0000009E 66D1EA                                  shr dx,1
   103 000000A1 8A3D[29000000]                          mov bh,byte[suma]
   104 000000A7 8015[29000000]00                        adc byte[suma],0
   105 000000AE 3A3D[29000000]                          cmp bh,byte[suma]
   106 000000B4 7402                                    je nu_e_continuu_2
   107 000000B6 EB07                                    jmp sari_nu_e_continuu_2
   108                                                  nu_e_continuu_2:
   109 000000B8 C605[29000000]00                            mov byte[suma],0
   110                                                  sari_nu_e_continuu_2:
   111                                                  
   112 000000BF 803D[29000000]03                        cmp byte[suma],3
   113 000000C6 750E                                    jne sari_2
   114                                                  
   115                                                  ;daca a ajuns aici avem un sir 111
   116 000000C8 C605[29000000]00                        mov byte[suma],0
   117 000000CF 8005[28000000]01                        add byte[cnt],1
   118                                                  
   119                                                  sari_2:
   120                                              
   121 000000D6 E2C6                                loop repeta2
   122 000000D8 E948FFFFFF                      jmp gata_verificare
   123                                          
   124                                          ;afisam in baza 2 fiecare dword
   125 000000DD BE[00000000]                    mov esi,dwords
   126 000000E2 B900000000                      mov ecx,0
   127 000000E7 8A0D[42000000]                  mov cl, byte[cnt_dwords]
   128                                          
   129                                          repeta_afisare:
   130                                          
   131                                              ;pun in edi pe fiecare byte cate un bit din dword, voi obtine bitii invers, apoi afisez inversat
   132 000000ED BF[43000000]                        mov edi,rez
   133 000000F2 AD                                  lodsd ;in dx:ax avem primul dword
   134 000000F3 890D[3A000000]                      mov [copie],ecx
   135 000000F9 B910000000                          mov ecx,16
   136                                              repeta_3:
   137 000000FE 66D1E8                                  shr ax,1
   138 00000101 B300                                    mov bl,0
   139 00000103 80D300                                  adc bl,0 ;in bl avem ultima cifra din dword ul nostru
   140 00000106 881F                                    mov byte[edi],bl
   141 00000108 47                                      inc edi
   142 00000109 E2F3                                loop repeta_3
   143                                              
   144 0000010B B910000000                          mov ecx,16
   145                                              repeta_4:
   146 00000110 66D1EA                                  shr dx,1
   147 00000113 B300                                    mov bl,0
   148 00000115 80D300                                  adc bl,0 ;in bl avem ultima cifra din dword ul nostru
   149 00000118 881F                                    mov byte[edi],bl
   150 0000011A 47                                      inc edi
   151 0000011B E2F3                                loop repeta_4
   152                                              
   153                                              ;acum afisez edi de la capat la inceput
   154                                              repeta_afisare_invers:
   155 0000011D 4F                                          dec edi
   156 0000011E 81FF[42000000]                              cmp edi,rez-1
   157 00000124 7418                                        je gata
   158                                                      
   159 00000126 BB00000000                                  mov ebx,0
   160 0000012B 8A1F                                        mov bl,byte[edi]
   161                                                      
   162 0000012D 53                                          push ebx
   163 0000012E 68[A7000000]                                push dword format_d
   164 00000133 FF15[00000000]                              call [printf]
   165 00000139 83C408                                      add esp,4*2
   166 0000013C EBDF                                        jmp repeta_afisare_invers
   167                                                      
   168                                              gata:
   169 0000013E FF35[AD000000]                      push dword[spatiu]
   170 00000144 68[AA000000]                        push dword format_c
   171 00000149 FF15[00000000]                      call [printf]
   172 0000014F 83C408                              add esp,4*2
   173                                              
   174                                              
   175 00000152 8B0D[3A000000]                      mov ecx,[copie]
   176 00000158 E293                            loop repeta_afisare
   177                                          
   178                                      
   179                                          ; exit(0)
   180 0000015A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   181 0000015C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
