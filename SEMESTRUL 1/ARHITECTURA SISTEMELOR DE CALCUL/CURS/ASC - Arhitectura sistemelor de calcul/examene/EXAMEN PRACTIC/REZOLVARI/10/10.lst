     1                                  ;Se citeste de la tastatura m,n apoi m numere zecimale, pe linii diferite. Sa se afiseze nr cu cel putin o cifra para in output.txt.
     2                                  bits 32 ; assembling for the 32 bits architecture
     3                                  
     4                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     5                                  global start        
     6                                  
     7                                  ; declare external functions needed by our program
     8                                  extern exit,scanf,printf,gets,fopen,fprintf,fclose               ; tell nasm that exit exists even if we won't be defining it
     9                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    10                                  import scanf msvcrt.dll                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    11                                  import printf msvcrt.dll
    12                                  import gets msvcrt.dll
    13                                  import fopen msvcrt.dll
    14                                  import fprintf msvcrt.dll
    15                                  import fclose msvcrt.dll
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data
    18 00000000 FFFFFFFF                    m dd -1
    19 00000004 FFFFFFFF                    n dd -1
    20 00000008 FF<rept>                    nr times 15 db -1
    21 00000017 FF<rept>                    nr_bun times 15 db -1
    22 00000026 256420256400                format_m_n db '%d %d',0
    23 0000002C 257300                      format_nr db '%s',0
    24 0000002F 25732000                    format_nr1 db '%s ',0
    25 00000033 0A0D00                      new_line db 10,13,0 
    26 00000036 00                          zero db 0
    27 00000037 01                          unu db 1
    28 00000038 02                          doi db 2
    29 00000039 00                          ok db 0
    30 0000003A FFFFFFFF                    copie dd -1
    31 0000003E FFFFFFFF                    copie1 dd -1
    32 00000042 2A                          asterix db '*'
    33 00000043 FF<rept>                    sir_bun times 100 db -1
    34 000000A7 6F75747075742E7478-         nume db 'output.txt',0
    34 000000B0 7400               
    35 000000B2 7700                        mod_acces db 'w',0
    36 000000B4 FFFFFFFF                    descriptor dd -1
    37                                  
    38                                  ; our code starts here
    39                                  segment code use32 class=code
    40                                      start:
    41                                          ;fopen(nume,mod_acces)
    42 00000000 68[B2000000]                    push dword mod_acces
    43 00000005 68[A7000000]                    push dword nume
    44 0000000A FF15[00000000]                  call [fopen]
    45                                          
    46 00000010 83F800                          cmp eax,0
    47 00000013 0F84AF000000                    je final_tot
    48 00000019 A3[B4000000]                    mov [descriptor],eax
    49                                          ;scanf(format,variabile)
    50 0000001E 68[04000000]                    push dword n
    51 00000023 68[00000000]                    push dword m
    52 00000028 68[26000000]                    push dword format_m_n
    53 0000002D FF15[00000000]                  call [scanf]
    54 00000033 83C40C                          add esp,4*3
    55                                          
    56 00000036 8B0D[00000000]                  mov ecx,dword[m]
    57 0000003C 83C101                          add ecx,1
    58                                          repeta:
    59 0000003F 890D[3A000000]                      mov [copie],ecx
    60                                              ;gets(nr)
    61 00000045 68[08000000]                        push dword nr
    62 0000004A FF15[00000000]                      call [gets]
    63 00000050 83C404                              add esp,4*1    
    64 00000053 BE[08000000]                        mov esi,nr
    65 00000058 BF[17000000]                        mov edi,nr_bun
    66 0000005D 8A1D[36000000]                      mov bl,byte[zero]
    67 00000063 881D[39000000]                      mov byte[ok],bl
    68                                              repeta_nr:        
    69 00000069 AC                                      lodsb
    70 0000006A 3C00                                    cmp al,0
    71 0000006C 7419                                    je final_repeta_nr
    72 0000006E AA                                      stosb ;in edi il pune daca nu s-a ajuns la final
    73                                                  
    74 0000006F 660FB6C0                                movzx ax,al
    75 00000073 F635[38000000]                          div byte[doi]; in ah restul
    76 00000079 80FC00                                  cmp ah,0
    77 0000007C 7507                                    jne impar
    78                                                  
    79 0000007E 8005[39000000]01                        add byte[ok],1
    80                                               
    81                                                  impar:
    82 00000085 EBE2                                    jmp repeta_nr
    83                                              final_repeta_nr:
    84                                              
    85 00000087 8A1D[39000000]                      mov bl,byte[ok]
    86 0000008D 3A1D[04000000]                      cmp bl,byte[n]
    87 00000093 751C                                jne nu_afisa
    88 00000095 C60700                              mov byte[edi],0
    89                                              ;frintf(descriptor,format,variabile)
    90 00000098 68[17000000]                        push dword nr_bun
    91 0000009D 68[2F000000]                        push dword format_nr1
    92 000000A2 FF35[B4000000]                      push dword[descriptor]
    93 000000A8 FF15[00000000]                      call [fprintf]
    94 000000AE 83C40C                              add esp,4*3
    95                                              
    96                                              nu_afisa:
    97                                  
    98 000000B1 8B0D[3A000000]                      mov ecx,[copie]
    99 000000B7 E286                            loop repeta
   100                                          ;fclose(descriptor)
   101 000000B9 FF35[B4000000]                  push dword[descriptor]
   102 000000BF FF15[00000000]                  call [fclose]
   103 000000C5 83C404                          add esp,4
   104                                          final_tot:
   105                                          ; exit(0)
   106 000000C8 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   107 000000CA FF15[00000000]                  call    [exit]       ; call exit to terminate the program
