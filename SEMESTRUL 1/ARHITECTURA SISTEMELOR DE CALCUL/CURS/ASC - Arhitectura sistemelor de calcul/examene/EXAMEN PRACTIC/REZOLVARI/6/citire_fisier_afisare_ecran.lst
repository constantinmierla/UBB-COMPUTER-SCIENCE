     1                                  ;Se citesc din fisierul numere.txt mai multe numere (pare si impare). Sa se creeze 2 siruri rezultat N si P astfel: N - doar numere impare si P - doar numere pare. Afisati cele 2 siruri rezultate pe ecran.
     2                                  bits 32 ; assembling for the 32 bits architecture
     3                                  
     4                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     5                                  global start        
     6                                  
     7                                  ; declare external functions needed by our program
     8                                  extern exit,fscanf,fopen,fclose,printf              ; tell nasm that exit exists even if we won't be defining it
     9                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    10                                  import fscanf msvcrt.dll                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    11                                  import fopen msvcrt.dll
    12                                  import fclose msvcrt.dll
    13                                  import printf msvcrt.dll
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16 00000000 6E756D6572652E7478-         filename db "numere.txt",0
    16 00000009 7400               
    17 0000000B 7200                        acces_mode db 'r',0
    18 0000000D FFFFFFFF                    descriptor dd -1
    19 00000011 FFFFFFFF                    cif dd -1
    20 00000015 256300                      format db '%c',0
    21 00000018 257300                      format_afisare db '%s',0
    22 0000001B FF<rept>                    destinatie times 100 db -1
    23                                  
    24                                      
    25                                      
    26                                  ; our code starts here
    27                                  segment code use32 class=code
    28                                      start:
    29 00000000 BE[1B000000]                    mov esi,destinatie
    30                                          ;fopen(filename,acces_mode)
    31 00000005 68[0B000000]                    push dword acces_mode
    32 0000000A 68[00000000]                    push dword filename
    33 0000000F FF15[00000000]                  call [fopen]
    34                                          
    35                                          ;vedem daca s-a deschis
    36 00000015 83F800                          cmp eax,0
    37 00000018 7457                            je out_program
    38 0000001A A3[0D000000]                    mov dword[descriptor],eax
    39                                          
    40                                          repeta:
    41                                              ;fscanf(descriptor,format,variabila)
    42 0000001F 68[11000000]                        push dword cif
    43 00000024 68[15000000]                        push dword format
    44 00000029 FF35[0D000000]                      push dword [descriptor]
    45 0000002F FF15[00000000]                      call [fscanf]
    46 00000035 83C40C                              add esp,4*3
    47                                              
    48 00000038 83F8FF                              cmp eax,-1
    49 0000003B 740C                                je out_citire
    50                                              
    51 0000003D 83C601                              add esi,1
    52 00000040 A0[11000000]                        mov al,byte[cif]
    53 00000045 8806                                mov byte[esi],al
    54                                              
    55 00000047 EBD6                                jmp repeta
    56                                          out_citire:
    57                                          
    58                                          ;fclose(descriptor)
    59 00000049 FF35[0D000000]                  push dword [descriptor]
    60 0000004F FF15[00000000]                  call [fclose]
    61 00000055 83C404                          add esp,4*1
    62                                          
    63 00000058 83C601                          add esi,1
    64 0000005B C60600                          mov byte[esi],0
    65                                          
    66                                          ;printf(format,variabile)
    67 0000005E 68[1B000000]                    push dword destinatie
    68 00000063 68[18000000]                    push dword format_afisare
    69 00000068 FF15[00000000]                  call [printf]
    70 0000006E 83C408                          add esp,4*2
    71                                          
    72                                          out_program:
    73                                          ; exit(0)
    74 00000071 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    75 00000073 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
