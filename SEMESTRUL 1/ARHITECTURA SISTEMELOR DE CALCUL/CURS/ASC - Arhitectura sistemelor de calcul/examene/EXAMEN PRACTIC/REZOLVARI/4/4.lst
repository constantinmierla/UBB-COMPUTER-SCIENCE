     1                                  ;Se citeste o propozitie de la tastatura. Sa se numere literele din fiecare cuvant si sa se afiseze aceste numere pe ecran.
     2                                  bits 32 ; assembling for the 32 bits architecture
     3                                  
     4                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     5                                  global start        
     6                                  
     7                                  ; declare external functions needed by our program
     8                                  extern exit,gets,printf               ; tell nasm that exit exists even if we won't be defining it
     9                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    10                                  import gets msvcrt.dll; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    11                                  import printf msvcrt.dll
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14 00000000 25642000                    format_afisare db '%d ',0
    15 00000004 FF<rept>                    sursa times 100 db -1
    16 00000068 FF<rept>                    destinatie times 100 db -1
    17 000000CC 00000000                    contor dd 0
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          
    22 00000000 68[04000000]                    push dword sursa
    23 00000005 FF15[00000000]                  call [gets]
    24 0000000B 83C404                          add esp,4*1
    25                                          
    26 0000000E BE[04000000]                    mov esi,sursa
    27 00000013 BF[68000000]                    mov edi,destinatie
    28                                          
    29                                          repeta:
    30 00000018 803E00                              cmp byte[esi],0
    31 0000001B 7446                                je final_repeta
    32                                              
    33 0000001D 803E20                              cmp byte[esi],' '
    34 00000020 7502                                jne stocheaza
    35 00000022 7403                                je numara
    36                                              
    37                                              stocheaza:
    38 00000024 A4                                      movsb ;mut la adresa edi litera de la adresa esi
    39 00000025 EBF1                                    jmp repeta
    40                                                  
    41                                              numara:
    42 00000027 83EF01                                  sub edi,1 ;ultimul movsb a crescut pozitia
    43                                                  repeta1:
    44 0000002A 81FF[67000000]                              cmp edi,destinatie-1 ;sa vedem daca am numarat toate literele
    45 00000030 740C                                        je final_repeta1
    46                                                      
    47 00000032 8005[CC000000]01                            add byte[contor],1
    48 00000039 83EF01                                      sub edi,1
    49 0000003C EBEC                                        jmp repeta1
    50                                                      
    51                                                  final_repeta1:
    52                                                  
    53                                                  ;afisez literele citite
    54                                                  ;printf(format,variabila)
    55 0000003E FF35[CC000000]                          push dword [contor]
    56 00000044 68[00000000]                            push dword format_afisare
    57 00000049 FF15[00000000]                          call [printf]
    58 0000004F 83C408                                  add esp, 4*2
    59                                                  
    60 00000052 C605[CC000000]00                        mov byte[contor], 0 ;resetez
    61 00000059 BF[68000000]                            mov edi,destinatie ;resetez
    62 0000005E 83C601                                  add esi,1 ;trec peste spatiu
    63 00000061 EBB5                                    jmp repeta
    64                                              
    65                                          final_repeta:
    66                                          
    67                                          
    68 00000063 83EF01                          sub edi,1 ;ultimul movsb a crescut pozitia
    69                                          repeta2:
    70 00000066 81FF[67000000]                        cmp edi,destinatie-1 ;sa vedem daca am numarat toate literele
    71 0000006C 740C                                  je final_repeta2
    72                                                      
    73 0000006E 8005[CC000000]01                      add byte[contor],1
    74 00000075 83EF01                                sub edi,1
    75 00000078 EBEC                                  jmp repeta2
    76                                                      
    77                                          final_repeta2:
    78                                                  
    79                                                  ;afisez literele citite
    80                                                  ;printf(format,variabila)
    81 0000007A FF35[CC000000]                  push dword [contor]
    82 00000080 68[00000000]                    push dword format_afisare
    83 00000085 FF15[00000000]                  call [printf]
    84 0000008B 83C408                          add esp,4*2
    85                                          
    86                                      
    87                                          ; exit(0)
    88 0000008E 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    89 00000090 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
